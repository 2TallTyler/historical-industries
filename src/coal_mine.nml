// Begin Coal Mine

spritelayout sprlay_coal_mine_1_a { // Hoist animation 1
	ground		{sprite:2022;}
	building	{sprite:2013; xoffset:7;}
}
spritelayout sprlay_coal_mine_1_b { // Hoist animation 2
	ground		{sprite:2022;}
	building	{sprite:2014; xoffset:7;}
}
spritelayout sprlay_coal_mine_1_c { // Hoist animation 3
	ground		{sprite:2022;}
	building	{sprite:2015; xoffset:7;}
}

spritelayout sprlay_coal_mine_2 { // Long building
	ground		{sprite:2022;}
	building	{sprite:2018;}
}

spritelayout sprlay_coal_mine_3 { // Elevated building
	ground		{sprite:2022;}
	building	{sprite:2021;}
}

spritelayout sprlay_coal_mine_4 { // Single tile coal pile
	ground		{sprite:2022;}
	building	{sprite:2025;}
}

spritelayout sprlay_coal_mine_5_N { // Coal pile N
	ground		{sprite:2022;}
	building	{sprite:2023;}
}

spritelayout sprlay_coal_mine_5_W { // Coal pile W
	ground		{sprite:2022;}
	building	{sprite:2024;}
}

spritelayout sprlay_coal_mine_6 {
	ground		{sprite:2022;}
}

switch (FEAT_INDUSTRYTILES, PARENT, switch_coal_mine_animation_2, this_month_transported("COAL") > 0) {1: return CB_RESULT_START_ANIMATION; return CB_RESULT_STOP_ANIMATION;}

switch (FEAT_INDUSTRYTILES, SELF, switch_coal_mine_animation_1, animation_frame) {
	0:	sprlay_coal_mine_1_a;
	1:	sprlay_coal_mine_1_b;
	2:	sprlay_coal_mine_1_c;
}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_1) { // hoist
property {
	substitute:				02; 
	accepted_cargos: 		[[PASS, 8]];
	animation_info:			[ANIMATION_LOOPING, 3];
	animation_speed:		2;
	animation_triggers:		bitmask(ANIM_TRIGGER_INDTILE_DISTRIBUTES_CARGO, ANIM_TRIGGER_INDTILE_INDUSTRY_LOOP);
}
graphics {
	default:				switch_coal_mine_animation_1;
	anim_control:		switch_coal_mine_animation_2;
}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_2) { // long building
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_2;}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_3) { // elevated building
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_3;}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_4) { // single tile coal pile
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_4;}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_5_N) { // large coal pile N
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_5_N;}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_5_W) { // large coal pile W
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_5_W;}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_6) { // blank tile
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_6;}}

tilelayout industry_layout_coal_mine {
	0,0:	ind_tile_coal_mine_1;	0,1:	ind_tile_coal_mine_2;	0,2:	ind_tile_coal_mine_5_N;
	1,0:	ind_tile_coal_mine_4;	1,1:	ind_tile_coal_mine_3;	1,2:	ind_tile_coal_mine_5_W;
}

tilelayout industry_layout_coal_mine_2 {
	0,0:	ind_tile_coal_mine_1;	0,1:	ind_tile_coal_mine_3;	0,2:	ind_tile_coal_mine_2;
	1,0:	ind_tile_coal_mine_4;	1,1:	ind_tile_coal_mine_4;	1,2:	ind_tile_coal_mine_3;
}

tilelayout industry_layout_coal_mine_3 {
	0,0:	ind_tile_coal_mine_2;	0,1:	ind_tile_coal_mine_1;	0,2:	ind_tile_coal_mine_3;
	1,0:	ind_tile_coal_mine_6;	1,1:	ind_tile_coal_mine_4;
}
	

// Coal Mine Industry


// If an odd number of industries exist, then must build within 100 tiles of another coal mine
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_cluster_2, industry_distance(industry_coal_mine, -1) <= 100) {1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}

// Check if an even number of coal mines already exist on the map (0 is even) by dividing by 2 and checking for a remainder. If even, build without needing cluster. If odd, continue to next switch for clustering
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_cluster_1, industry_count(industry_coal_mine, -1) % 2 == 0) {1: return CB_RESULT_LOCATION_ALLOW; switch_coal_mine_cluster_2;}

// Disable clustering if smallest map edge is < 512 (clustering doesn't work well on small maps)
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_cluster_0, map_min_edge >= 512) {1: switch_coal_mine_cluster_1; CB_RESULT_LOCATION_ALLOW;}


switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_location_check_5, industry_distance(industry_steel_mill,-1) >= 60 && industry_distance(industry_farm,-1) >= 30 && industry_distance(industry_logging_camp,-1) >= 30) {1: switch_coal_mine_cluster_0; CB_RESULT_LOCATION_DISALLOW;} // Don't allow construction within 60 tiles (Manhattan) of steel mill
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_location_check_3, town_euclidean_dist(0,0) >= LOAD_TEMP(0)+100) {1: switch_coal_mine_location_check_5; return CB_RESULT_LOCATION_DISALLOW;} // Add 10 to the town zone radii and check if the distance to the town sign is larger than that radius. The town zone radii and distance check use the square of the distance, thus 64 = 8 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_coal_mine_location_check_2, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_coal_mine_location_check_3;} // Add up the town zone radii and store it in temporary register 0
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_location_check_1, nearby_tile_height(0,0) < 4 && param_elevation_checks == 1) {1: return CB_RESULT_LOCATION_DISALLOW; switch_coal_mine_location_check_2;} // Coal mines must be built at tile height 2 or above./* // Industry Construction Switches - Read from bottom to top // */


/*	Slot Reservations - all industries */

// Compare how many industries are currently on the map with the target number, scaled to the map size from a "normal" 256 x 256 map. If less than the target number, proceed to town distance checks, otherwise disallow construction.
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_density_high,
	industry_count(industry_coal_mine, -1) < 12 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_coal_mine_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_density_normal,
	industry_count(industry_coal_mine, -1) < 6 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_coal_mine_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_density_low,
	industry_count(industry_coal_mine, -1) < 3 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_coal_mine_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_density_verylow,
	industry_count(industry_coal_mine, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_coal_mine_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

// Get the selected industry density from parameter and redirect to the appropriate switch
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_density_selector, param_industry_density) {
	0: switch_coal_mine_density_verylow;
	1: switch_coal_mine_density_low;
	2: switch_coal_mine_density_normal;
	3: switch_coal_mine_density_high;
}

/*
Industry Totals on 256 x 256 map:

	Industry			Very Low (10)	Low (25)	Normal (55)		High (80)
	Oil Wells			1				3			8				12
	Farm				1				5			12				12
	Lumber Camp			1				3			8				12
	Coal Mine			1				3			6				12
	Iron Mine			1				3			6				12
	Steel Mill			1				1			1				2
	Factory				1				3			6				7
	Paper Mill			1				1			1				2
	Oil Refinery		1				1			1				2
	Power Plant			0				1			3				3
	Recycling Center	1				1			3				4
*/

// Prospected industries aren't restricted by industry totals, but must meet other requirements
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_coal_mine_location_check_1; switch_coal_mine_density_selector;}

// Funded industries have no restrictions
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_coal_mine_allow_prospected;}

item (FEAT_INDUSTRIES, industry_coal_mine, 1) {
	property {
		substitute:				INDUSTRYTYPE_COAL_MINE;
		life_type:				IND_LIFE_TYPE_EXTRACTIVE;
		cargo_types:			[
								produce_cargo("COAL",15),
								accept_cargo("PASS"),
								produce_cargo("PASS",15),
		];
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_COAL_MINE));
		prob_map_gen:			15;
		prob_in_game:			15;
		fund_cost_multiplier:	100;
		layouts:				[
			industry_layout_coal_mine,
			industry_layout_coal_mine_2,
			industry_layout_coal_mine_3,
		];
	}
	graphics {
		location_check:			switch_coal_mine_allow_funded;
		construction_probability:	1;
	}
}


switch (FEAT_OBJECTS, SELF, switch_object_graphics_coal_mine_5, relative_pos) {
	relative_coord(0, 0): sprlay_coal_mine_5_N;
	relative_coord(1, 0): sprlay_coal_mine_5_W;
}

item (FEAT_OBJECTS, object_item_coal_mine_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
		
	}
	graphics {
		default:				sprlay_coal_mine_1_a;
	}
}

item (FEAT_OBJECTS, object_item_coal_mine_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
		
	}
	graphics {
		default:				sprlay_coal_mine_2;
	}
}

item (FEAT_OBJECTS, object_item_coal_mine_3) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
		
	}
	graphics {
		default:				sprlay_coal_mine_3;
	}
}

item (FEAT_OBJECTS, object_item_coal_mine_4) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
		
	}
	graphics {
		default:				sprlay_coal_mine_4;
	}
}

item (FEAT_OBJECTS, object_item_coal_mine_5) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,1];
		introduction_date:		1700;
		num_views:				1;
		
	}
	graphics {
		default:				switch_object_graphics_coal_mine_5;
	}
}

// End Coal Mine