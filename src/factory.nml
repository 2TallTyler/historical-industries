// Begin Factory

spritelayout sprlay_factory_1_N {
	ground		{sprite:2146;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
	building	{sprite:2150;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_factory_1_E {
	ground		{sprite:2147;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
	building	{sprite:2151;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_factory_1_W {
	ground		{sprite:2148;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
	building	{sprite:2152;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_factory_1_S {
	ground		{sprite:2149;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

item (FEAT_INDUSTRYTILES, ind_tile_factory_1_N) {
	property {
		substitute:				02;
		accepted_cargos:		[[PASS, 8],[STEL, 8],[WOOD, 8]];}
	graphics {default:			sprlay_factory_1_N;}
}
item (FEAT_INDUSTRYTILES, ind_tile_factory_1_E) {
	property {
		substitute:				02;
		accepted_cargos:		[[PASS, 8],[STEL, 8],[WOOD, 8]];
	}
	graphics {
		default:				sprlay_factory_1_E;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_factory_1_W) {
	property {
		substitute:				02;
		accepted_cargos:		[[PASS, 8],[STEL, 8],[WOOD, 8]];
	}
	graphics {
		default:				sprlay_factory_1_W;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_factory_1_S) {
	property {
		substitute:				02;
		accepted_cargos:		[[PASS, 8],[STEL, 8],[WOOD, 8]];
	}
	graphics {
		default:				sprlay_factory_1_S;
	}
}

tilelayout industry_layout_factory_1x2 {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	0,2:	ind_tile_factory_1_N;
	0,3:	ind_tile_factory_1_E;
	1,2:	ind_tile_factory_1_W;
	1,3:	ind_tile_factory_1_S;
}

tilelayout industry_layout_factory_2x1 {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	2,0:	ind_tile_factory_1_N;
	2,1:	ind_tile_factory_1_E;
	3,0:	ind_tile_factory_1_W;
	3,1:	ind_tile_factory_1_S;
}

tilelayout industry_layout_factory_2x2 {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	0,2:	ind_tile_factory_1_N;
	0,3:	ind_tile_factory_1_E;
	1,2:	ind_tile_factory_1_W;
	1,3:	ind_tile_factory_1_S;
	
	2,0:	ind_tile_factory_1_N;
	2,1:	ind_tile_factory_1_E;
	3,0:	ind_tile_factory_1_W;
	3,1:	ind_tile_factory_1_S;
	
	2,2:	ind_tile_factory_1_N;
	2,3:	ind_tile_factory_1_E;
	3,2:	ind_tile_factory_1_W;
	3,3:	ind_tile_factory_1_S;
}

// Location Check: Must be within 8 tiles of a town boundary (town zones, not town sign) with population >= 500, or a city with any population

switch (FEAT_INDUSTRIES, PARENT, switch_factory_location_check_3, is_city == 1 || population >= 500) {1: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW;} // Factories only build in cities or towns with >= 500 population
switch (FEAT_INDUSTRIES, SELF, switch_factory_location_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_factory_location_check_3; return CB_RESULT_LOCATION_DISALLOW;} // Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 64 = 8 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_factory_location_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_factory_location_check_2;} // Add up the town zone radii and store it in temporary register 0
switch (FEAT_INDUSTRIES, SELF, switch_factory_location_check_0, extra_callback_info2 == IND_CREATION_FUND) {1: return CB_RESULT_LOCATION_ALLOW; switch_factory_location_check_1;} // No restrictions on funded industries

item (FEAT_INDUSTRIES, industry_factory) {
	property {
		substitute:				INDUSTRYTYPE_TEMPERATE_FACTORY;
		life_type:				IND_LIFE_TYPE_PROCESSING;
		cargo_types:			[
								accept_cargo("STEL", produce_cargo("GOOD",1)),
								accept_cargo("WOOD", produce_cargo("GOOD",1)),
								produce_cargo("PASS",10),
		];
		name:					string(STR_NAME_FACTORY);
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_FACTORY));
		prob_map_gen:			3;
		prob_in_game:			3;
		fund_cost_multiplier:	100;
		layouts:				[industry_layout_factory_2x2, industry_layout_factory_1x2, industry_layout_factory_2x1];
		conflicting_ind_types:	[industry_steel_mill];
	}
	graphics {
		location_check:			switch_factory_location_check_0;
		colour:					COLOUR_PALE_GREEN;
		construction_probability:	(current_year >= 1800) ? CB_RESULT_IND_PROBABILITY_FROM_PROPERTY : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE_1800);
	}
}

switch (FEAT_OBJECTS, SELF, switch_object_graphics_factory_1, relative_pos) {
	relative_coord(0, 0): sprlay_factory_1_N;
	relative_coord(0, 1): sprlay_factory_1_E;
	relative_coord(1, 0): sprlay_factory_1_W;
    relative_coord(1, 1): sprlay_factory_1_S;
}

item (FEAT_OBJECTS, object_item_factory_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_FACTORY);
		climates_available:		ALL_CLIMATES;
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,2];
		introduction_date:		1800;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_factory_1;
	}
}

// End Factory