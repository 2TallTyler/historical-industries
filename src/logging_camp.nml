// Begin Sawmill

spritelayout sprlay_logging_camp_1 {
	ground		{sprite:2022;}
	building	{sprite:2070;}
}

spritelayout sprlay_logging_camp_2 {
	ground		{sprite:2022;}
	building	{sprite:2071;}
}

spritelayout sprlay_logging_camp_3 {
	ground		{sprite:2022;}
	building	{sprite:2063;}
}

spritelayout sprlay_logging_camp_4 {
	ground		{sprite:2022;}
	building	{sprite:2069;}
}

spritelayout sprlay_logging_camp_5 {
	ground		{sprite:2022;}
	building	{sprite:2066;}
}

spritelayout sprlay_logging_camp_6 {
	ground		{sprite:2022;}
}

item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_1) {
	property {
		substitute:				11;
	}
	graphics {
		default:				sprlay_logging_camp_1;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_2) {
	property {
		substitute:				02;
	}
	graphics {
		default:				sprlay_logging_camp_2;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_3) {
	property {
		substitute:				02;
	}
	graphics {
		default:				sprlay_logging_camp_3;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_4) {
	property {
		substitute:				02;
	}
	graphics {
		default:				sprlay_logging_camp_4;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_5) {
	property {
		substitute:				02;
	}
	graphics {
		default:				sprlay_logging_camp_5;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_6) {
	property {
		substitute:				02;
	}
	graphics {
		default:				sprlay_logging_camp_6;
	}
}

tilelayout industry_layout_logging_camp_1 {
	0,0:	ind_tile_logging_camp_5;	0,1:	ind_tile_logging_camp_6;	0,2:	ind_tile_logging_camp_4;
	1,0:	ind_tile_logging_camp_3;	1,1:	ind_tile_logging_camp_1;	1,2:	ind_tile_logging_camp_2;
}

tilelayout industry_layout_logging_camp_2 {
	0,0:	ind_tile_logging_camp_1;	0,1:	ind_tile_logging_camp_6;	0,2:	ind_tile_logging_camp_4;	0,3:	ind_tile_logging_camp_4;
	1,0:	ind_tile_logging_camp_1;	1,1:	ind_tile_logging_camp_3;	1,2:	ind_tile_logging_camp_2;	1,3:	ind_tile_logging_camp_5;
}

tilelayout industry_layout_logging_camp_3 {
	0,0:	ind_tile_logging_camp_5;	0,1:	ind_tile_logging_camp_1;	0,2:	ind_tile_logging_camp_1;
	1,0:	ind_tile_logging_camp_6;	1,1:	ind_tile_logging_camp_4;	1,2:	ind_tile_logging_camp_2;
										2,1:	ind_tile_logging_camp_3;	2,2:	ind_tile_logging_camp_6;
}

/* Switch for clearcutting trees */
switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_production_check_1, last_month_transported("WOOD") > 0 && transported_last_month_pct("WOOD") > 70) {1: return 1; return 0;}

/* Location checks - specific to Lumber Camps */ 
switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_location_check_5, industry_distance(industry_paper_mill,-1) >= 60 && industry_distance(industry_farm,-1) >= 30 && industry_distance(industry_logging_camp,-1) >= 30) {1: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW;} // Don't allow construction within 60 tiles (Manhattan) of paper mill
switch (FEAT_INDUSTRIES, PARENT, switch_logging_camp_location_check_4, is_city) {1: return CB_RESULT_LOCATION_DISALLOW; switch_logging_camp_location_check_5;} // Logging camps don't build in cities
switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_location_check_3, town_euclidean_dist(0,0) >= LOAD_TEMP(0)+400) {1: switch_logging_camp_location_check_4; return CB_RESULT_LOCATION_DISALLOW;} // Add 20 to the town zone radii and check if the distance to the town sign is larger than that radius. The town zone radii and distance check use the square of the distance, thus 64 = 8 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_logging_camp_location_check_2, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_logging_camp_location_check_3;} // Add up the town zone radii and store it in temporary register 0


/*	Slot Reservations - all industries */

// Compare how many industries are currently on the map with the target number, scaled to the map size from a "normal" 256 x 256 map. If less than the target number, proceed to town distance checks, otherwise disallow construction.
switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_density_high,
	industry_count(industry_logging_camp, -1) < 12 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_logging_camp_location_check_2; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_density_normal,
	industry_count(industry_logging_camp, -1) < 6 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_logging_camp_location_check_2; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_density_low,
	industry_count(industry_logging_camp, -1) < 3 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_logging_camp_location_check_2; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_density_verylow,
	industry_count(industry_logging_camp, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_logging_camp_location_check_2; return CB_RESULT_LOCATION_DISALLOW;}

// Get the selected industry density from parameter and redirect to the appropriate switch
switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_density_selector, param_industry_density) {
	0: switch_logging_camp_density_verylow;
	1: switch_logging_camp_density_low;
	2: switch_logging_camp_density_normal;
	3: switch_logging_camp_density_high;
}

/*
Industry Totals on 256 x 256 map:

	Industry			Very Low (10)	Low (25)	Normal (55)		High (80)
	Oil Wells			1				3			8				12
	Farm				1				5			12				12
	Lumber Camp			1				3			8				12
	Coal Mine			1				3			6				12
	Iron Mine			1				3			6				12
	Steel Mill			1				1			1				2
	Factory				1				3			6				7
	Paper Mill			1				1			1				2
	Oil Refinery		1				1			1				2
	Power Plant			0				1			3				3
	Recycling Center	1				1			3				4
*/

// Prospected industries aren't restricted by industry totals, but must meet other requirements
switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_logging_camp_location_check_2; switch_logging_camp_density_selector;}

// Funded industries have no restrictions
switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_logging_camp_allow_prospected;}

if (param_clearcut == 1) {
	item (FEAT_INDUSTRIES, industry_logging_camp, 6) {
		property {
			substitute:				INDUSTRYTYPE_LUMBER_MILL;
			life_type:				IND_LIFE_TYPE_PROCESSING;
			cargo_types:			[produce_cargo("WOOD",2),];
			spec_flags:				bitmask(IND_FLAG_CUT_TREES);
			name:					string(STR_NAME_LOGGING_CAMP);
			nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_LOGGING_CAMP));
			prob_map_gen:			15;
			prob_in_game:			15;
			fund_cost_multiplier:	40;
			layouts:				[
				industry_layout_logging_camp_1,
				industry_layout_logging_camp_2,
				industry_layout_logging_camp_3,
			];
		}
		graphics {
			location_check:			switch_logging_camp_allow_funded;
			control_special:		switch_logging_camp_production_check_1;
			extra_text_industry:	string(STR_EXTRA_TEXT_LOGGING_CAMP);
			construction_probability:	1;
		}
	}
} else {
	item (FEAT_INDUSTRIES, industry_logging_camp, 6) {
		property {
			substitute:				INDUSTRYTYPE_FOREST;
			life_type:				IND_LIFE_TYPE_ORGANIC;
			cargo_types:			[produce_cargo("WOOD",13),];
			name:					string(STR_NAME_LOGGING_CAMP);
			nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_LOGGING_CAMP));
			prob_map_gen:			15;
			prob_in_game:			15;
			fund_cost_multiplier:	40;
			layouts:				[
				industry_layout_logging_camp_1,
				industry_layout_logging_camp_2,
				industry_layout_logging_camp_3,
			];
		}
		graphics {
			location_check:			switch_logging_camp_allow_funded;
			construction_probability:	1;
		}
	}
}

item (FEAT_OBJECTS, object_item_logging_camp_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_LOGGING_CAMP);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_logging_camp_1;
	}
}

item (FEAT_OBJECTS, object_item_logging_camp_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_LOGGING_CAMP);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_logging_camp_2;
	}
}

item (FEAT_OBJECTS, object_item_logging_camp_3) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_LOGGING_CAMP);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_logging_camp_3;
	}
}

item (FEAT_OBJECTS, object_item_logging_camp_4) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_LOGGING_CAMP);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_logging_camp_4;
	}
}

item (FEAT_OBJECTS, object_item_logging_camp_5) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_LOGGING_CAMP);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_logging_camp_5;
	}
}
item (FEAT_OBJECTS, object_item_logging_camp_6) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_LOGGING_CAMP);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE,OBJ_FLAG_ALLOW_BRIDGE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_logging_camp_6;
	}
}

// End Sawmill