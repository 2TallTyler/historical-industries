// Begin Header

grf {
	grfid: "TT\04\01";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESC);
	version: 1;
	min_compatible_version: 1;
	url: string(STR_WEBSITE);

param 0 {
  param_industry_density {
   name: string(STR_PARAM_NAME_INDUSTRY_DENSITY);
   desc: string(STR_PARAM_DESC_INDUSTRY_DENSITY);
   type: int;
   min_value: 0;
   max_value: 3;
   def_value: 2;
   names:	{
	0:	string(STR_DENSITY_VERY_LOW);
	1:	string(STR_DENSITY_LOW);
	2:	string(STR_DENSITY_NORMAL);
	3:	string(STR_DENSITY_HIGH);
   };
   }}

param 1 {
  param_primary_only {
   name: string(STR_PARAM_NAME_PRIMARY_ONLY);
   desc: string(STR_PARAM_DESC_PRIMARY_ONLY);
   def_value: 0;
   type: bool;
   }}

param 2 {
  param_food_factory {
   name: string(STR_PARAM_NAME_FOOD_FACTORY);
   desc: string(STR_PARAM_DESC_FOOD_FACTORY);
   type: int;
   min_value: 0;
   max_value: 1;
   def_value: 1;
   names:	{
	0:	string(STR_PARAM_FOOD_FACTORY_HOUSES);
	1:	string(STR_PARAM_FOOD_FACTORY_FACTORY);
   };
   }}
   
param 3 {
  param_mine_cluster {
   name: string(STR_PARAM_NAME_MINE_CLUSTER);
   desc: string(STR_PARAM_DESC_MINE_CLUSTER);
   def_value: 1;
   type: bool;
   }}

param 4 {
  param_elevation_checks {
   name: string(STR_PARAM_NAME_ELEVATION_CHECKS);
   desc: string(STR_PARAM_DESC_ELEVATION_CHECKS);
   def_value: 0;
   type: bool;
   }}
   
param 5 {
  param_refinery_water {
   name: string(STR_PARAM_NAME_REFINERY_WATER);
   desc: string(STR_PARAM_DESC_REFINERY_WATER);
   def_value: 0;
   type: bool;
   }}
}

/*
// Create an error if the map is smaller than 256 x 256
if (map_min_edge < 256 && map_max_edge < 512) {
	error(FATAL, string(STR_ERROR_MAP_TOO_SMALL));
}
*/

// Create an error if OpenTTD version is before 1.10.0
if (version_openttd(1,10,0,28004) > openttd_version) {
	error(FATAL, string(STR_ERROR_GAME_VERSION));
}

// Disable base game industries
disable_item(FEAT_INDUSTRIES, 0, 36);

// End Header
// Begin Cargos

cargotable {
	FOOD, PASS, MAIL, GOOD, WOOD, STEL, GRAI, IORE, COAL, RFPR, OIL_
}

item (FEAT_CARGOS, cargo_food, 0x0B) {
	property {
		number:						0x0B;
		sprite:						4312;
		type_name:					TTD_STR_CARGO_PLURAL_FOOD;
		unit_name:					TTD_STR_CARGO_SINGULAR_FOOD;
		type_abbreviation:			TTD_STR_ABBREV_FOOD;
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_REFRIGERATED, CC_EXPRESS);
		cargo_label:				"FOOD";
		town_growth_effect:			TOWNGROWTH_FOOD;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				TTD_STR_QUANTITY_FOOD;
		penalty_lowerbound:			0;
		single_penalty_length:		30;
		station_list_colour:		162;
		cargo_payment_list_colour:	162;
		price_factor:				158;
		capacity_multiplier:		1;		
	}
}

item (FEAT_CARGOS, cargo_chemicals, 23) {
	property {
		number:						23;
		sprite:						4314;
		type_name:					string(STR_CARGO_NAME_CHEMICALS);
		unit_name:					string(STR_CARGO_NAME_CHEMICALS);
		type_abbreviation:			string(STR_CARGO_ABBREV_CHEMICALS);
		weight:						1.2;
		is_freight:					1;
		cargo_classes:				bitmask(CC_LIQUID, CC_POWDERIZED);
		cargo_label:				"RFPR";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_LITERS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_CHEMICALS);
		penalty_lowerbound:			12;
		single_penalty_length:		255;
		station_list_colour:		177;
		cargo_payment_list_colour:	177;
		price_factor:				117;
		capacity_multiplier:		1;		
	}
}


// End Cargos
// Begin Farm

spritelayout sprlay_farm_1_N { // Farmhouse N
	ground		{sprite:2106;}
	building	{sprite:2108;}
}

spritelayout sprlay_farm_1_E { // Farmhouse W
	ground		{sprite:2107;}
	building	{sprite:2109;}
}

switch (FEAT_OBJECTS, SELF, switch_object_graphics_farm_1, relative_pos) {
	relative_coord(0, 0): sprlay_farm_1_N;
	relative_coord(0, 1): sprlay_farm_1_E;
}

spritelayout sprlay_farm_2 { // Hay shed
	ground		{sprite:2110;}
	building	{sprite:2111;}
}

spritelayout sprlay_farm_3 { // Barn
	ground		{sprite:2112;}
	building	{sprite:2113;}
}

spritelayout sprlay_farm_4 { // Silos
	ground		{sprite:2116;}
	building	{sprite:2115;}
}

spritelayout sprlay_farm_5 { // Farmyard
	ground		{sprite:2116;}
	building	{sprite:2117;}
}

spritelayout sprlay_farm_6 { // Empty tile
	ground		{sprite:2116;}
}

item (FEAT_INDUSTRYTILES, ind_tile_farm_1_N) { // House north
property {substitute:	02; special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);}
graphics {default:		sprlay_farm_1_N;}}

item (FEAT_INDUSTRYTILES, ind_tile_farm_1_E) { // House east
property {substitute:	02; special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);}
graphics {default:		sprlay_farm_1_E;}}
 
item (FEAT_INDUSTRYTILES, ind_tile_farm_2) { // Hay shed
property {substitute:	02; special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);}
graphics {default:		sprlay_farm_2;}}

item (FEAT_INDUSTRYTILES, ind_tile_farm_3) { // Barn
property {substitute:	02; special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);}
graphics {default:		sprlay_farm_3;}}

item (FEAT_INDUSTRYTILES, ind_tile_farm_4) { // Silos
property {substitute:	02; special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);}
graphics {default:		sprlay_farm_4;}}

item (FEAT_INDUSTRYTILES, ind_tile_farm_5) { // Farmyard
property {substitute:	02; special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);}
graphics {default:		sprlay_farm_5;}}

item (FEAT_INDUSTRYTILES, ind_tile_farm_6) { // empty tile
property {substitute:	02;}
graphics {default:		sprlay_farm_6;}}

tilelayout industry_layout_farm_1 {
	0,0:	ind_tile_farm_4;	0,1:	ind_tile_farm_3;	0,2:	ind_tile_farm_2;
	1,0:	ind_tile_farm_1_N;	1,1:	ind_tile_farm_1_E;	1,2:	ind_tile_farm_6;
}
tilelayout industry_layout_farm_2 {
	0,0:	ind_tile_farm_5;	0,1:	ind_tile_farm_4;	0,2:	ind_tile_farm_2;
	1,0:	ind_tile_farm_3;	1,1:	ind_tile_farm_1_N;	1,2:	ind_tile_farm_1_E;
}
tilelayout industry_layout_farm_3 {
	0,0:	ind_tile_farm_5;	0,1:	ind_tile_farm_1_N;	0,2:	ind_tile_farm_1_E;
	1,0:	ind_tile_farm_5;	1,1:	ind_tile_farm_3;	1,2:	ind_tile_farm_4;
}
tilelayout industry_layout_farm_4 {
	0,0:	ind_tile_farm_1_N;	0,1:	ind_tile_farm_1_E;	0,2:	ind_tile_farm_2;
	1,0:	ind_tile_farm_3;	1,1:	ind_tile_farm_6;	1,2:	ind_tile_farm_5;
}
tilelayout industry_layout_farm_5 {
	0,0:	ind_tile_farm_1_N;	0,1:	ind_tile_farm_1_E;	0,2:	ind_tile_farm_4;
	1,0:	ind_tile_farm_3;	1,1:	ind_tile_farm_6;	1,2:	ind_tile_farm_2;
}
tilelayout industry_layout_farm_6 {
	0,0:	ind_tile_farm_1_N;	0,1:	ind_tile_farm_1_E;	0,2:	ind_tile_farm_5;
	1,0:	ind_tile_farm_2;	1,1:	ind_tile_farm_6;	1,2:	ind_tile_farm_5;
}
tilelayout industry_layout_farm_7 {
	0,0:	ind_tile_farm_3;	0,1:	ind_tile_farm_6;	0,2:	ind_tile_farm_5;
	1,0:	ind_tile_farm_1_N;	1,1:	ind_tile_farm_1_E;	1,2:	ind_tile_farm_2;
}



switch (FEAT_INDUSTRIES, SELF, switch_farm_location_check_5, industry_distance(industry_farm,-1) >= 40 && industry_distance(industry_steel_mill,-1) >= 30 && industry_distance(industry_oil_refinery,-1) >= 30 && industry_distance(industry_paper_mill,-1) >= 30 && industry_distance(industry_factory,-1) >= 30 && industry_distance(industry_iron_mine,-1) >= 30 && industry_distance(industry_coal_mine,-1) >= 30 && industry_distance(industry_oil_wells,-1) >= 30 && industry_distance(industry_logging_camp,-1) >= 30) {1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;} // Don't allow construction within 60 tiles (Manhattan) of steel mill
switch (FEAT_INDUSTRIES, PARENT, switch_farm_location_check_4, is_city) {1: return CB_RESULT_LOCATION_DISALLOW; switch_farm_location_check_5;} // don't build in cities
switch (FEAT_INDUSTRIES, SELF, switch_farm_location_check_3, town_euclidean_dist(0,0) >= LOAD_TEMP(0)+100) {1: switch_farm_location_check_4; return CB_RESULT_LOCATION_DISALLOW;} // Add 10 to the town zone radii and check if the distance to the town sign is larger than that radius. The town zone radii and distance check use the square of the distance, thus 64 = 8 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_farm_location_check_2, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_farm_location_check_3;} // Add up the town zone radii and store it in temporary register 0
switch (FEAT_INDUSTRIES, SELF, switch_farm_location_check_1, nearby_tile_height(0,0) > 2 && param_elevation_checks == 1) {1: return CB_RESULT_LOCATION_DISALLOW; switch_farm_location_check_2;} // Farms must be built at tile height 2 or below.


/*	Slot Reservations - all industries */

// Compare how many industries are currently on the map with the target number, scaled to the map size from a "normal" 256 x 256 map. If less than the target number, proceed to town distance checks, otherwise disallow construction.
switch (FEAT_INDUSTRIES, SELF, switch_farm_density_high,
	industry_count(industry_farm, -1) < 12 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_farm_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_farm_density_normal,
	industry_count(industry_farm, -1) < 12 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_farm_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_farm_density_low,
	industry_count(industry_farm, -1) < 5 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_farm_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_farm_density_verylow,
	industry_count(industry_farm, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_farm_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

// Get the selected industry density from parameter and redirect to the appropriate switch
switch (FEAT_INDUSTRIES, SELF, switch_farm_density_selector, param_industry_density) {
	0: switch_farm_density_verylow;
	1: switch_farm_density_low;
	2: switch_farm_density_normal;
	3: switch_farm_density_high;
}

/*
Industry Totals on 256 x 256 map:

	Industry		Very Low (10)	Low (25)	Normal (55)		High (80)
	Oil Wells		1				4			8				12
	Farm			1				5			12				12
	Lumber Camp		1				3			8				12
	Coal Mine		1				3			6				12
	Iron Mine		1				3			6				12
	Steel Mill		1				1			2				3
	Factory			1				3			6				7
	Paper Mill		1				1			2				3
	Oil Refinery	1				1			2				3
	Power Plant		1				1			3				4
*/
	
// Prospected industries aren't restricted by industry totals, but must meet other requirements
switch (FEAT_INDUSTRIES, SELF, switch_farm_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_farm_location_check_1; switch_farm_density_selector;}

// Funded industries have no restrictions
switch (FEAT_INDUSTRIES, SELF, switch_farm_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_farm_allow_prospected;}

item (FEAT_INDUSTRIES, industry_farm) {
	property {
		substitute:				INDUSTRYTYPE_TEMPERATE_ARCTIC_FARM;
		life_type:				IND_LIFE_TYPE_ORGANIC;
		spec_flags:				bitmask(IND_FLAG_PLANT_FIELDS_WHEN_BUILT, IND_FLAG_PLANT_FIELDS_PERIODICALLY);
		cargo_types:			[
								produce_cargo("FOOD",12),
								accept_cargo("RFPR"),
		];
		name:					TTD_STR_INDUSTRY_NAME_FARM;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_FARM));
		prob_map_gen:			30;
		prob_in_game:			20;
		fund_cost_multiplier:	100;
		layouts:				[
			industry_layout_farm_1,
			industry_layout_farm_2,
			industry_layout_farm_3,
			industry_layout_farm_4,
			industry_layout_farm_5,
			industry_layout_farm_6,
			industry_layout_farm_7,
		];
	}
	graphics {
		location_check:			switch_farm_allow_funded;
		construction_probability:	1;
	}
} 
 
 
 

item (FEAT_OBJECTS, object_item_farm_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FARM;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,2];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_farm_1;
	}
}

item (FEAT_OBJECTS, object_item_farm_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FARM;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_farm_2;
	}
}

item (FEAT_OBJECTS, object_item_farm_3) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FARM;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_farm_3;
	}
}

item (FEAT_OBJECTS, object_item_farm_4) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FARM;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_farm_4;
	}
}

item (FEAT_OBJECTS, object_item_farm_5) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FARM;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_farm_5;
	}
}

item (FEAT_OBJECTS, object_item_farm_6) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FARM;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_farm_6;
	}
}

// End Farm
// Begin Coal Mine

spritelayout sprlay_coal_mine_1_a { // Hoist animation 1
	ground		{sprite:2022;}
	building	{sprite:2013; xoffset:7;}
}
spritelayout sprlay_coal_mine_1_b { // Hoist animation 2
	ground		{sprite:2022;}
	building	{sprite:2014; xoffset:7;}
}
spritelayout sprlay_coal_mine_1_c { // Hoist animation 3
	ground		{sprite:2022;}
	building	{sprite:2015; xoffset:7;}
}

spritelayout sprlay_coal_mine_2 { // Long building
	ground		{sprite:2022;}
	building	{sprite:2018;}
}

spritelayout sprlay_coal_mine_3 { // Elevated building
	ground		{sprite:2022;}
	building	{sprite:2021;}
}

spritelayout sprlay_coal_mine_4 { // Single tile coal pile
	ground		{sprite:2022;}
	building	{sprite:2025;}
}

spritelayout sprlay_coal_mine_5_N { // Coal pile N
	ground		{sprite:2022;}
	building	{sprite:2023;}
}

spritelayout sprlay_coal_mine_5_W { // Coal pile W
	ground		{sprite:2022;}
	building	{sprite:2024;}
}

switch (FEAT_INDUSTRYTILES, PARENT, switch_coal_mine_animation_2, this_month_transported("COAL") > 0) {1: return CB_RESULT_START_ANIMATION; return CB_RESULT_STOP_ANIMATION;}

switch (FEAT_INDUSTRYTILES, SELF, switch_coal_mine_animation_1, animation_frame) {
	0:	sprlay_coal_mine_1_a;
	1:	sprlay_coal_mine_1_b;
	2:	sprlay_coal_mine_1_c;
}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_1) {
property {
	substitute:				02; 
	accepted_cargos: 		[[PASS, 8]];
	animation_info:			[ANIMATION_LOOPING, 3];
	animation_speed:		2;
	animation_triggers:		bitmask(ANIM_TRIGGER_INDTILE_DISTRIBUTES_CARGO, ANIM_TRIGGER_INDTILE_INDUSTRY_LOOP);
}
graphics {
	default:				switch_coal_mine_animation_1;
	anim_control:		switch_coal_mine_animation_2;
}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_2) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_2;}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_3) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_3;}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_4) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_4;}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_5_N) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_5_N;}}

item (FEAT_INDUSTRYTILES, ind_tile_coal_mine_5_W) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_coal_mine_5_W;}}

tilelayout industry_layout_coal_mine {
	0,0:	ind_tile_coal_mine_1;	0,1:	ind_tile_coal_mine_2;	0,2:	ind_tile_coal_mine_5_N;
	1,0:	ind_tile_coal_mine_4;	1,1:	ind_tile_coal_mine_3;	1,2:	ind_tile_coal_mine_5_W;
}

// Coal Mine Industry


// If an odd number of industries exist, then must build within 100 tiles of another coal mine
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_cluster_2, industry_distance(industry_coal_mine, -1) <= 100) {1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}

// Check if an even number of coal mines already exist on the map (0 is even) by dividing by 2 and checking for a remainder. If even, build without needing cluster. If odd, continue to next switch for clustering
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_cluster_1, industry_count(industry_coal_mine, -1) % 2 == 0) {1: return CB_RESULT_LOCATION_ALLOW; switch_coal_mine_cluster_2;}

// Check if mine clustering parameter is enabled and smallest map edge is >= 512 (clustering doesn't work well on small maps)
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_cluster_0, param_mine_cluster == 1 && map_min_edge >= 512) {1: switch_coal_mine_cluster_1; CB_RESULT_LOCATION_ALLOW;}


switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_location_check_5, industry_distance(industry_steel_mill,-1) >= 60 && industry_distance(industry_farm,-1) >= 30 && industry_distance(industry_logging_camp,-1) >= 30) {1: switch_coal_mine_cluster_0; CB_RESULT_LOCATION_DISALLOW;} // Don't allow construction within 60 tiles (Manhattan) of steel mill
switch (FEAT_INDUSTRIES, PARENT, switch_coal_mine_location_check_4, is_city) {1: return CB_RESULT_LOCATION_DISALLOW; switch_coal_mine_location_check_5;} // Coal mines don't build in cities
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_location_check_3, town_euclidean_dist(0,0) >= LOAD_TEMP(0)+100) {1: switch_coal_mine_location_check_4; return CB_RESULT_LOCATION_DISALLOW;} // Add 10 to the town zone radii and check if the distance to the town sign is larger than that radius. The town zone radii and distance check use the square of the distance, thus 64 = 8 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_coal_mine_location_check_2, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_coal_mine_location_check_3;} // Add up the town zone radii and store it in temporary register 0
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_location_check_1, nearby_tile_height(0,0) < 4 && param_elevation_checks == 1) {1: return CB_RESULT_LOCATION_DISALLOW; switch_coal_mine_location_check_2;} // Coal mines must be built at tile height 2 or above./* // Industry Construction Switches - Read from bottom to top // */


/*	Slot Reservations - all industries */

// Compare how many industries are currently on the map with the target number, scaled to the map size from a "normal" 256 x 256 map. If less than the target number, proceed to town distance checks, otherwise disallow construction.
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_density_high,
	industry_count(industry_coal_mine, -1) < 12 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_coal_mine_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_density_normal,
	industry_count(industry_coal_mine, -1) < 6 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_coal_mine_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_density_low,
	industry_count(industry_coal_mine, -1) < 3 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_coal_mine_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_density_verylow,
	industry_count(industry_coal_mine, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_coal_mine_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

// Get the selected industry density from parameter and redirect to the appropriate switch
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_density_selector, param_industry_density) {
	0: switch_coal_mine_density_verylow;
	1: switch_coal_mine_density_low;
	2: switch_coal_mine_density_normal;
	3: switch_coal_mine_density_high;
}

/*
Industry Totals on 256 x 256 map:

	Industry		Very Low (10)	Low (25)	Normal (55)		High (80)
	Oil Wells		1				4			8				12
	Farm			1				5			12				12
	Lumber Camp		1				3			8				12
	Coal Mine		1				3			6				12
	Iron Mine		1				3			6				12
	Steel Mill		1				1			2				3
	Factory			1				3			6				7
	Paper Mill		1				1			2				3
	Oil Refinery	1				1			2				3
	Power Plant		1				1			3				4
*/

// Prospected industries aren't restricted by industry totals, but must meet other requirements
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_coal_mine_location_check_1; switch_coal_mine_density_selector;}

// Funded industries have no restrictions
switch (FEAT_INDUSTRIES, SELF, switch_coal_mine_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_coal_mine_allow_prospected;}

item (FEAT_INDUSTRIES, industry_coal_mine) {
	property {
		substitute:				INDUSTRYTYPE_COAL_MINE;
		life_type:				IND_LIFE_TYPE_EXTRACTIVE;
		cargo_types:			[
								produce_cargo("COAL",15),
								accept_cargo("PASS"),
								produce_cargo("PASS",15),
		];
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_COAL_MINE));
		prob_map_gen:			15;
		prob_in_game:			15;
		fund_cost_multiplier:	100;
		layouts:				[industry_layout_coal_mine,];
	}
	graphics {
		location_check:			switch_coal_mine_allow_funded;
		construction_probability:	1;
	}
}


switch (FEAT_OBJECTS, SELF, switch_object_graphics_coal_mine_5, relative_pos) {
	relative_coord(0, 0): sprlay_coal_mine_5_N;
	relative_coord(1, 0): sprlay_coal_mine_5_W;
}

item (FEAT_OBJECTS, object_item_coal_mine_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
		
	}
	graphics {
		default:				sprlay_coal_mine_1_a;
	}
}

item (FEAT_OBJECTS, object_item_coal_mine_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
		
	}
	graphics {
		default:				sprlay_coal_mine_2;
	}
}

item (FEAT_OBJECTS, object_item_coal_mine_3) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
		
	}
	graphics {
		default:				sprlay_coal_mine_3;
	}
}

item (FEAT_OBJECTS, object_item_coal_mine_4) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
		
	}
	graphics {
		default:				sprlay_coal_mine_4;
	}
}

item (FEAT_OBJECTS, object_item_coal_mine_5) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_COAL_MINE;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,1];
		introduction_date:		1700;
		num_views:				1;
		
	}
	graphics {
		default:				switch_object_graphics_coal_mine_5;
	}
}

// End Coal Mine
// Begin Power Plant

spritelayout sprlay_power_plant_1 { // Powerhouse
	ground		{sprite:1420;}
	building	{sprite:2050;}
}

spritelayout sprlay_power_plant_2 { // Power terminals
	ground		{sprite:1420;}
	building	{sprite:2053;}
}

spritelayout sprlay_power_plant_3 { // Transformers
	ground		{sprite:1420;}
	building	{sprite:2054; yoffset:2;}
}

spritelayout sprlay_power_plant_4 { // Cooling tower
	ground		{sprite:3981;}
	building	{sprite:2047;}
}
spritelayout sprlay_power_plant_5_N { // Coal pile N
	ground		{sprite:2022;}
	building	{sprite:2023;}
}

spritelayout sprlay_power_plant_5_W { // Coal pile W
	ground		{sprite:2022;}
	building	{sprite:2024;}
}

switch (FEAT_INDUSTRYTILES, SELF, switch_power_plant_cooling_tower_availability, current_year >= 1918) {1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_1) { // Powerhouse
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {default:		sprlay_power_plant_1;}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_2) { // Power terminals
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {default:		sprlay_power_plant_2;}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_3) { // Transformers
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {default:		sprlay_power_plant_3;}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_4) { // Cooling tower
property {
	substitute:			02; 
	accepted_cargos: 	[[PASS, 8], [COAL, 8]];
	land_shape_flags:	bitmask(LSF_ONLY_ON_FLAT_LAND);
	}
graphics {
	default:	sprlay_power_plant_4;
	tile_check:	switch_power_plant_cooling_tower_availability;
}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_5_N) { // Coal pile N
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {default:		sprlay_power_plant_5_N;}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_5_W) { // Coal pile W
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {default:		sprlay_power_plant_5_W;}}


tilelayout industry_layout_power_plant_1 {
0,0:	ind_tile_power_plant_1;	0,1:	ind_tile_power_plant_1;
1,0:	ind_tile_power_plant_2;	1,1:	ind_tile_power_plant_2;
2,0:	ind_tile_power_plant_3;	2,1:	ind_tile_power_plant_3;
}

tilelayout industry_layout_power_plant_2 {
0,0:	ind_tile_power_plant_1;	0,1:	ind_tile_power_plant_5_N;
1,0:	ind_tile_power_plant_1;	1,1:	ind_tile_power_plant_5_W;
2,0:	ind_tile_power_plant_2;	2,1:	ind_tile_power_plant_3;
}

tilelayout industry_layout_power_plant_3 {
/*0,0:	clear;	*/				0,1:	ind_tile_power_plant_4;		/*0,2:	clear;*/	0,3:	ind_tile_power_plant_1;	0,4:	ind_tile_power_plant_5_N;
1,0:	ind_tile_power_plant_4;	/*1,1:	clear;	*/					/*1,2:	clear;*/	1,3:	ind_tile_power_plant_1;	1,4:	ind_tile_power_plant_5_W;
/*2,0:	clear;	*/				2,1:	ind_tile_power_plant_4;		/*2,2:	clear;*/	2,3:	ind_tile_power_plant_2;	2,4:	ind_tile_power_plant_3;
}

tilelayout industry_layout_power_plant_4 {
0,0:	ind_tile_power_plant_5_N;	0,1:	ind_tile_power_plant_1;
1,0:	ind_tile_power_plant_5_W;	1,1:	ind_tile_power_plant_1;
2,0:	ind_tile_power_plant_3;		2,1:	ind_tile_power_plant_2;
}

tilelayout industry_layout_power_plant_5 {
0,0:	ind_tile_power_plant_4;	/*0,1:	clear;	*/					0,2:	ind_tile_power_plant_4;
/*1,0:	clear;	*/				/*1,1:	clear;	*/					/*1,2:	clear;*/
2,0:	ind_tile_power_plant_1;	2,1:	ind_tile_power_plant_3;		2,2:	ind_tile_power_plant_1;
3,0:	ind_tile_power_plant_2;	3,1:	ind_tile_power_plant_2;		3,2:	ind_tile_power_plant_2;
4,0:	ind_tile_power_plant_1;	4,1:	ind_tile_power_plant_3;		4,2:	ind_tile_power_plant_1;
/*5,0:	clear;	*/				/*5,1:	clear;*/					/*5,2:	clear;*/
6,0:	ind_tile_power_plant_4;	/*6,1:	clear;*/					6,2:	ind_tile_power_plant_4;
}

/* // Industry Construction Switches - Read from bottom to top // */


/* Don't allow the same industry within 100 tiles - secondary industries only */
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_distance_competitor, industry_distance(industry_power_plant, -1) > 100 ) {1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}


/* Population Check - different for power plants, only requiring at least 500 population with no regard for other industries */

switch (FEAT_INDUSTRIES, PARENT, switch_power_plant_population_check_1, // Check if there's enough population in the town to support the new industry in additon to whatever industries already exist (300 population per industry)
	population >= 500) {1: switch_power_plant_distance_competitor; CB_RESULT_LOCATION_DISALLOW;}


/* Town Distance Check - secondary industries only */

// Ensure processing industries are near towns. Distance measurement is to town sign, so this adds the town zone radii to scale the distance requirement to the town size
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_town_distance_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_power_plant_population_check_1; return CB_RESULT_LOCATION_DISALLOW;} // Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 225 = 15 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_power_plant_town_distance_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_power_plant_town_distance_check_2;} // Add up the town zone radii and store it in temporary register 0


/*	Slot Reservations - all industries */

// Compare how many industries are currently on the map with the target number, scaled to the map size from a "normal" 256 x 256 map. If less than the target number, proceed to town distance checks, otherwise disallow construction.
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_density_high,
	industry_count(industry_power_plant, -1) < 4 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_power_plant_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_power_plant_density_normal,
	industry_count(industry_power_plant, -1) < 3 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_power_plant_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_power_plant_density_low,
	industry_count(industry_power_plant, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_power_plant_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_power_plant_density_verylow,
	industry_count(industry_power_plant, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_power_plant_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

// Get the selected industry density from parameter and redirect to the appropriate switch
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_density_selector, param_industry_density) {
	0: switch_power_plant_density_verylow;
	1: switch_power_plant_density_low;
	2: switch_power_plant_density_normal;
	3: switch_power_plant_density_high;
}

/*
Industry Totals on 256 x 256 map:

	Industry		Very Low (10)	Low (25)	Normal (55)		High (80)
	Oil Wells		1				4			8				12
	Farm			1				5			12				12
	Lumber Camp		1				3			8				12
	Coal Mine		1				3			6				12
	Iron Mine		1				3			6				12
	Steel Mill		1				1			2				3
	Factory			1				3			6				7
	Paper Mill		1				1			2				3
	Oil Refinery	1				1			2				3
	Power Plant		1				1			3				4
*/

// If "Generate primary only" parameter enabled, disallow random generation of secondary industries
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_generate_primary_only, param_primary_only)
	{1: return CB_RESULT_LOCATION_DISALLOW; switch_power_plant_density_selector;}

// Prospected industries aren't restricted by industry totals, but must meet other requirements
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_power_plant_town_distance_check_1; switch_power_plant_generate_primary_only;}

// Funded industries have no restrictions
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_power_plant_allow_prospected;}

item (FEAT_INDUSTRIES, industry_power_plant) {
	property {
		substitute:				INDUSTRYTYPE_POWER_PLANT;
		life_type:				IND_LIFE_TYPE_BLACK_HOLE;
		spec_flags:				(param_primary_only == 1) ? bitmask(IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION) : 0;
		cargo_types:			[
								accept_cargo("COAL"),
								accept_cargo("PASS"),
								produce_cargo("PASS",2),
		];
		name:					string(STR_NAME_POWER_PLANT);
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_POWER_PLANT));
		fund_cost_multiplier:	100;
		layouts:				[
			industry_layout_power_plant_1,
			industry_layout_power_plant_2,
			industry_layout_power_plant_3,
			industry_layout_power_plant_4,
			industry_layout_power_plant_5,
			];
		map_colour:				208;
	}
	graphics {
		location_check:			switch_power_plant_allow_funded;
		construction_probability:	(current_year >= 1882) ? 1 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE_1882);
	}
}

item (FEAT_OBJECTS, object_item_power_plant_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_1;
	}
}

item (FEAT_OBJECTS, object_item_power_plant_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_2;
	}
}

item (FEAT_OBJECTS, object_item_power_plant_3) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_3;
	}
}

item (FEAT_OBJECTS, object_item_power_plant_4) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_4;
	}
}

// End Power Plant
// Begin Iron Mine

spritelayout sprlay_iron_mine_00 {ground{sprite:2325;}}
spritelayout sprlay_iron_mine_01 {ground{sprite:2326;}}
spritelayout sprlay_iron_mine_02 {ground{sprite:2327;}}
spritelayout sprlay_iron_mine_03 {ground{sprite:2328;}}

spritelayout sprlay_iron_mine_10 {ground{sprite:2329;}}
spritelayout sprlay_iron_mine_11 {ground{sprite:2330;}}
spritelayout sprlay_iron_mine_12 {ground{sprite:2331;}}
spritelayout sprlay_iron_mine_13 {ground{sprite:2332;}}

spritelayout sprlay_iron_mine_20 {ground{sprite:2333;}}
spritelayout sprlay_iron_mine_21 {ground{sprite:2334;}}
spritelayout sprlay_iron_mine_22 {ground{sprite:2335;}}
spritelayout sprlay_iron_mine_23 {ground{sprite:2336;}}

spritelayout sprlay_iron_mine_30 {ground{sprite:2337;}}
spritelayout sprlay_iron_mine_31 {ground{sprite:2338;}}
spritelayout sprlay_iron_mine_32 {ground{sprite:2339;}}
spritelayout sprlay_iron_mine_33 {ground{sprite:2340;}}

item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_00) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_00;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_01) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_01;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_02) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_02;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_03) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_03;}}

item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_10) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_10;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_11) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_11;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_12) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_12;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_13) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_13;}}

item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_20) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_20;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_21) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_21;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_22) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_22;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_23) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_23;}}

item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_30) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_30;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_31) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_31;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_32) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_32;}}
item (FEAT_INDUSTRYTILES, ind_tile_iron_mine_33) {
property {substitute:	02; accepted_cargos: [[PASS, 8]];}
graphics {default:		sprlay_iron_mine_33;}}

tilelayout industry_layout_iron_mine {
	0,0:	ind_tile_iron_mine_00;	0,1:	ind_tile_iron_mine_01;	0,2:	ind_tile_iron_mine_02;	0,3:	ind_tile_iron_mine_03;
	1,0:	ind_tile_iron_mine_10;	1,1:	ind_tile_iron_mine_11;	1,2:	ind_tile_iron_mine_12;	1,3:	ind_tile_iron_mine_13;
	2,0:	ind_tile_iron_mine_20;	2,1:	ind_tile_iron_mine_21;	2,2:	ind_tile_iron_mine_22;	2,3:	ind_tile_iron_mine_23;
	3,0:	ind_tile_iron_mine_30;	3,1:	ind_tile_iron_mine_31;	3,2:	ind_tile_iron_mine_32;	3,3:	ind_tile_iron_mine_33;
}

// Iron Mine Industry

// If an odd number of industries exist, then must build within 100 tiles of another iron mine
switch (FEAT_INDUSTRIES, SELF, switch_iron_mine_cluster_2, industry_distance(industry_iron_mine, -1) <= 100) {1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}

// Check if an even number ofironl mines already exist on the map (0 is even) by dividing by 2 and checking for a remainder. If even, build without needing cluster. If odd, continue to next switch for clustering
switch (FEAT_INDUSTRIES, SELF, switch_iron_mine_cluster_1, industry_count(industry_iron_mine, -1) % 2 == 0) {1: return CB_RESULT_LOCATION_ALLOW; switch_iron_mine_cluster_2;}

// Check if mine clustering parameter is enabled and smallest map edge is >= 512 (clustering doesn't work well on small maps)
switch (FEAT_INDUSTRIES, SELF, switch_iron_mine_cluster_0, param_mine_cluster == 1 && map_min_edge >= 512) {1: switch_iron_mine_cluster_1; CB_RESULT_LOCATION_ALLOW;}


switch (FEAT_INDUSTRIES, SELF, switch_iron_mine_location_check_5, industry_distance(industry_steel_mill,-1) >= 60 && industry_distance(industry_farm,-1) >= 30 && industry_distance(industry_logging_camp,-1) >= 30) {1: switch_iron_mine_cluster_0; CB_RESULT_LOCATION_DISALLOW;} // Don't allow construction within 60 tiles (Manhattan) of steel mill
switch (FEAT_INDUSTRIES, PARENT, switch_iron_mine_location_check_4, is_city) {1: return CB_RESULT_LOCATION_DISALLOW; switch_iron_mine_location_check_5;} // Iron mines don't build in cities
switch (FEAT_INDUSTRIES, SELF, switch_iron_mine_location_check_3, town_euclidean_dist(0,0) >= LOAD_TEMP(0)+400) {1: switch_iron_mine_location_check_4; return CB_RESULT_LOCATION_DISALLOW;} // Add 20 to the town zone radii and check if the distance to the town sign is larger than that radius. The town zone radii and distance check use the square of the distance, thus 64 = 8 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_iron_mine_location_check_2, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_iron_mine_location_check_3;} // Add up the town zone radii and store it in temporary register 0


/*	Slot Reservations - all industries */

// Compare how many industries are currently on the map with the target number, scaled to the map size from a "normal" 256 x 256 map. If less than the target number, proceed to town distance checks, otherwise disallow construction.
switch (FEAT_INDUSTRIES, SELF, switch_iron_mine_density_high,
	industry_count(industry_iron_mine, -1) < 12 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_iron_mine_location_check_2; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_iron_mine_density_normal,
	industry_count(industry_iron_mine, -1) < 6 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_iron_mine_location_check_2; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_iron_mine_density_low,
	industry_count(industry_iron_mine, -1) < 3 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_iron_mine_location_check_2; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_iron_mine_density_verylow,
	industry_count(industry_iron_mine, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_iron_mine_location_check_2; return CB_RESULT_LOCATION_DISALLOW;}

// Get the selected industry density from parameter and redirect to the appropriate switch
switch (FEAT_INDUSTRIES, SELF, switch_iron_mine_density_selector, param_industry_density) {
	0: switch_iron_mine_density_verylow;
	1: switch_iron_mine_density_low;
	2: switch_iron_mine_density_normal;
	3: switch_iron_mine_density_high;
}

/*
Industry Totals on 256 x 256 map:

	Industry		Very Low (10)	Low (25)	Normal (55)		High (80)
	Oil Wells		1				4			8				12
	Farm			1				5			12				12
	Lumber Camp		1				3			8				12
	Coal Mine		1				3			6				12
	Iron Mine		1				3			6				12
	Steel Mill		1				1			2				3
	Factory			1				3			6				7
	Paper Mill		1				1			2				3
	Oil Refinery	1				1			2				3
	Power Plant		1				1			3				4
*/

// Prospected industries aren't restricted by industry totals, but must meet other requirements
switch (FEAT_INDUSTRIES, SELF, switch_iron_mine_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_iron_mine_location_check_2; switch_iron_mine_density_selector;}

// Funded industries have no restrictions
switch (FEAT_INDUSTRIES, SELF, switch_iron_mine_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_iron_mine_allow_prospected;}

item (FEAT_INDUSTRIES, industry_iron_mine) {
	property {
		substitute:				INDUSTRYTYPE_IRON_ORE_MINE;
		life_type:				IND_LIFE_TYPE_EXTRACTIVE;
		cargo_types:			[
								produce_cargo("IORE",15),
								accept_cargo("PASS"),
								produce_cargo("PASS",8),
		];
		name:					TTD_STR_INDUSTRY_NAME_IRON_ORE_MINE;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_IRON_MINE));
		prob_map_gen:			15;
		prob_in_game:			15;
		fund_cost_multiplier:	100;
		layouts:				[industry_layout_iron_mine,];
		conflicting_ind_types:	[industry_steel_mill];
	}
	graphics {
		location_check:			switch_iron_mine_allow_funded;
		construction_probability:	(current_year >= 1856) ? 1 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE_1856);
	}
}

// Iron Mine Objects

switch (FEAT_OBJECTS, SELF, switch_object_graphics_iron_mine, relative_pos) {
	relative_coord(0,0): sprlay_iron_mine_00;
	relative_coord(0,1): sprlay_iron_mine_01;
	relative_coord(0,2): sprlay_iron_mine_02;
	relative_coord(0,3): sprlay_iron_mine_03;
	
	relative_coord(1,0): sprlay_iron_mine_10;
	relative_coord(1,1): sprlay_iron_mine_11;
	relative_coord(1,2): sprlay_iron_mine_12;
	relative_coord(1,3): sprlay_iron_mine_13;
	
	relative_coord(2,0): sprlay_iron_mine_20;
	relative_coord(2,1): sprlay_iron_mine_21;
	relative_coord(2,2): sprlay_iron_mine_22;
	relative_coord(2,3): sprlay_iron_mine_23;
	
	relative_coord(3,0): sprlay_iron_mine_30;
	relative_coord(3,1): sprlay_iron_mine_31;
	relative_coord(3,2): sprlay_iron_mine_32;
	relative_coord(3,3): sprlay_iron_mine_33;
}

item (FEAT_OBJECTS, object_item_iron_mine) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_IRON_ORE_MINE;
		climates_available:		ALL_CLIMATES;
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[4,4];
		introduction_date:		1856;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_iron_mine;
	}
}

// End Iron Mine
// Begin Steel Mill

spritelayout sprlay_steel_mill_1_N {
	ground		{sprite:2118;}
	building	{sprite:2119;}
}
spritelayout sprlay_steel_mill_1_E {
	ground		{sprite:2120;}
	building	{sprite:2121;}
}
spritelayout sprlay_steel_mill_1_W {
	ground		{sprite:2122;}
	building	{sprite:2123;}
}
spritelayout sprlay_steel_mill_1_S {
	ground		{sprite:2124;}
}

spritelayout sprlay_steel_mill_2_N {
	ground		{sprite:2125;}
	building	{sprite:2126;}
}
spritelayout sprlay_steel_mill_2_W {
	ground		{sprite:2127;}
	building	{sprite:2128;}
}

item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_1_N) {
	property {
		substitute:				02;
		accepted_cargos:		[[IORE, 8],[COAL, 8],[PASS, 8]];}
	graphics {default:			sprlay_steel_mill_1_N;}
}
item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_1_E) {
	property {
		substitute:				02;
		accepted_cargos:		[[IORE, 8],[COAL, 8],[PASS, 8]];}
	graphics {default:			sprlay_steel_mill_1_E;}
}
item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_1_W) {
	property {
		substitute:				02;
		accepted_cargos:		[[IORE, 8],[COAL, 8],[PASS, 8]];}
	graphics {default:			sprlay_steel_mill_1_W;}
}
item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_1_S) {
	property {
		substitute:				02;
		accepted_cargos:		[[IORE, 8],[COAL, 8],[PASS, 8]];}
	graphics {default:			sprlay_steel_mill_1_S;}
}


item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_2_N) {
	property {
		substitute:				02;
		accepted_cargos:		[[IORE, 8],[COAL, 8],[PASS, 8]];}
	graphics {default:			sprlay_steel_mill_2_N;}
}
item (FEAT_INDUSTRYTILES, ind_tile_steel_mill_2_W) {
	property {
		substitute:				02;
		accepted_cargos:		[[IORE, 8],[COAL, 8],[PASS, 8]];}
	graphics {default:			sprlay_steel_mill_2_W;}
}

tilelayout industry_layout_steel_mill_1 {
0,0: ind_tile_steel_mill_2_N;	0,1: ind_tile_steel_mill_2_N;	0,2: ind_tile_steel_mill_2_N;	0,3: ind_tile_steel_mill_2_N;	
1,0: ind_tile_steel_mill_2_W;	1,1: ind_tile_steel_mill_2_W;	1,2: ind_tile_steel_mill_2_W;	1,3: ind_tile_steel_mill_2_W;
	
2,0: ind_tile_steel_mill_2_N;	2,1: ind_tile_steel_mill_2_N;	2,2: ind_tile_steel_mill_1_N;	2,3: ind_tile_steel_mill_1_E;
3,0: ind_tile_steel_mill_2_W;	3,1: ind_tile_steel_mill_2_W;	3,2: ind_tile_steel_mill_1_W;	3,3: ind_tile_steel_mill_1_S;

4,0: ind_tile_steel_mill_1_N;	4,1: ind_tile_steel_mill_1_E;	4,2: ind_tile_steel_mill_1_N;	4,3: ind_tile_steel_mill_1_E;
5,0: ind_tile_steel_mill_1_W;	5,1: ind_tile_steel_mill_1_S;	5,2: ind_tile_steel_mill_1_W;	5,3: ind_tile_steel_mill_1_S;

}

/* // Industry Construction Switches - Read from bottom to top // */

/* Don't allow the same industry within 100 tiles - secondary industries only */
switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_distance_competitor, industry_distance(industry_steel_mill, -1) > 100 ) {1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}

// Only allow a steel mill if a factory already exists. Factory must come first because it's the only destination for steel.
switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_second_1, industry_count(industry_factory,-1) > 0 ) {1: switch_steel_mill_distance_competitor; CB_RESULT_LOCATION_DISALLOW;} // Only allow a steel mill if a factory already exists


/* Population Check - secondary industries only */

switch (FEAT_INDUSTRIES, PARENT, switch_steel_mill_population_check_2, // Check if there's enough population in the town to support the new industry in additon to whatever industries already exist (300 population per industry)
	population >= LOAD_TEMP(1)) {1: switch_steel_mill_second_1; CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_population_check_1, STORE_TEMP(
	// Count existing processing industries in town
	industry_town_count(industry_oil_refinery,-1)	* 300 +
	industry_town_count(industry_paper_mill,-1) 	* 300 +
	industry_town_count(industry_steel_mill,-1)		* 300 +
	industry_town_count(industry_factory,-1)		* 300 +
	300 // Add population required for this industry
	, 1))
	{switch_steel_mill_population_check_2;}


/* Town Distance Check - secondary industries only */

// Ensure processing industries are near towns. Distance measurement is to town sign, so this adds the town zone radii to scale the distance requirement to the town size
switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_town_distance_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_steel_mill_population_check_1; return CB_RESULT_LOCATION_DISALLOW;} // Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 225 = 15 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_steel_mill_town_distance_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_steel_mill_town_distance_check_2;} // Add up the town zone radii and store it in temporary register 0


/*	Slot Reservations - all industries */

// Compare how many industries are currently on the map with the target number, scaled to the map size from a "normal" 256 x 256 map. If less than the target number, proceed to town distance checks, otherwise disallow construction.
switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_density_high,
	industry_count(industry_steel_mill, -1) < 3 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_steel_mill_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_density_normal,
	industry_count(industry_steel_mill, -1) < 2 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_steel_mill_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_density_low,
	industry_count(industry_steel_mill, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_steel_mill_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_density_verylow,
	industry_count(industry_steel_mill, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_steel_mill_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

// Get the selected industry density from parameter and redirect to the appropriate switch
switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_density_selector, param_industry_density) {
	0: switch_steel_mill_density_verylow;
	1: switch_steel_mill_density_low;
	2: switch_steel_mill_density_normal;
	3: switch_steel_mill_density_high;
}

/*
Industry Totals on 256 x 256 map:

	Industry		Very Low (10)	Low (25)	Normal (55)		High (80)
	Oil Wells		1				4			8				12
	Farm			1				5			12				12
	Lumber Camp		1				3			8				12
	Coal Mine		1				3			6				12
	Iron Mine		1				3			6				12
	Steel Mill		1				1			2				3
	Factory			1				3			6				7
	Paper Mill		1				1			2				3
	Oil Refinery	1				1			2				3
	Power Plant		1				1			3				4
*/

// If "Generate primary only" parameter enabled, disallow random generation of secondary industries
switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_generate_primary_only, param_primary_only)
	{1: return CB_RESULT_LOCATION_DISALLOW; switch_steel_mill_density_selector;}

// Prospected industries aren't restricted by industry totals, but must meet other requirements
switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_steel_mill_town_distance_check_1; switch_steel_mill_generate_primary_only;}

// Funded industries have no restrictions
switch (FEAT_INDUSTRIES, SELF, switch_steel_mill_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_steel_mill_allow_prospected;}

item (FEAT_INDUSTRIES, industry_steel_mill) {
	property {
		substitute:				INDUSTRYTYPE_STEEL_MILL;
		override:				INDUSTRYTYPE_STEEL_MILL;
		life_type:				IND_LIFE_TYPE_PROCESSING;
		spec_flags:				(param_primary_only == 1) ? bitmask(IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION) : 0;
		cargo_types:			[
								accept_cargo("IORE", produce_cargo("STEL",1)),
								accept_cargo("COAL", produce_cargo("STEL",1)),
								accept_cargo("PASS"),
								produce_cargo("PASS",6),
		];
		name:					TTD_STR_INDUSTRY_NAME_STEEL_MILL;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_STEEL_MILL));
		fund_cost_multiplier:	100;
		layouts:				[industry_layout_steel_mill_1,];
		map_colour:				10;
	}
	graphics {
		location_check:			switch_steel_mill_allow_funded;
		construction_probability:	(current_year >= 1856) ? 1 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE_1856);
	}
}

switch (FEAT_OBJECTS, SELF, switch_object_graphics_steel_mill_1, relative_pos) {
	relative_coord(0, 0): sprlay_steel_mill_1_N;
	relative_coord(0, 1): sprlay_steel_mill_1_E;
	relative_coord(1, 0): sprlay_steel_mill_1_W;
    relative_coord(1, 1): sprlay_steel_mill_1_S;
}

switch (FEAT_OBJECTS, SELF, switch_object_graphics_steel_mill_2, relative_pos) {
	relative_coord(0, 0): sprlay_steel_mill_2_N;
	relative_coord(1, 0): sprlay_steel_mill_2_W;
}

item (FEAT_OBJECTS, object_item_steel_mill_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_STEEL_MILL;
		climates_available:		ALL_CLIMATES;
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,2];
		introduction_date:		1856;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_steel_mill_1;
		purchase:				sprlay_steel_mill_1_N;
	}
}

item (FEAT_OBJECTS, object_item_steel_mill_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_STEEL_MILL;
		climates_available:		ALL_CLIMATES;
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,1];
		introduction_date:		1856;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_steel_mill_2;
		purchase:				sprlay_steel_mill_2_N;
	}
}

// End Steel Mill
// Begin Factory

spritelayout sprlay_factory_1_N {
	ground		{sprite:2146;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
	building	{sprite:2150;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_factory_1_E {
	ground		{sprite:2147;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
	building	{sprite:2151;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_factory_1_W {
	ground		{sprite:2148;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
	building	{sprite:2152;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_factory_1_S {
	ground		{sprite:2149;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

item (FEAT_INDUSTRYTILES, ind_tile_factory_1_N) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		/*accepted_cargos:		[[PASS, 8],[STEL, 8],[WOOD, 8],[RFPR, 8],[FOOD, 8]];*/
	}
	graphics {default:			sprlay_factory_1_N;}
}
item (FEAT_INDUSTRYTILES, ind_tile_factory_1_E) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		/*accepted_cargos:		[[PASS, 8],[STEL, 8],[WOOD, 8],[RFPR, 8],[FOOD, 8]];*/
	}
	graphics {
		default:				sprlay_factory_1_E;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_factory_1_W) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		/*accepted_cargos:		[[PASS, 8],[STEL, 8],[WOOD, 8],[RFPR, 8],[FOOD, 8]];*/
	}
	graphics {
		default:				sprlay_factory_1_W;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_factory_1_S) {
	property {
		substitute:				02;
		special_flags:			bitmask(INDTILE_FLAG_ACCEPT_ALL);
		/*accepted_cargos:		[[PASS, 8],[STEL, 8],[WOOD, 8],[RFPR, 8],[FOOD, 8]];*/
	}
	graphics {
		default:				sprlay_factory_1_S;
	}
}

tilelayout industry_layout_factory_1x2 {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	0,2:	ind_tile_factory_1_N;
	0,3:	ind_tile_factory_1_E;
	1,2:	ind_tile_factory_1_W;
	1,3:	ind_tile_factory_1_S;
}

tilelayout industry_layout_factory_2x1 {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	2,0:	ind_tile_factory_1_N;
	2,1:	ind_tile_factory_1_E;
	3,0:	ind_tile_factory_1_W;
	3,1:	ind_tile_factory_1_S;
}

tilelayout industry_layout_factory_2x2 {
	0,0:	ind_tile_factory_1_N;
	0,1:	ind_tile_factory_1_E;
	1,0:	ind_tile_factory_1_W;
	1,1:	ind_tile_factory_1_S;
	
	0,2:	ind_tile_factory_1_N;
	0,3:	ind_tile_factory_1_E;
	1,2:	ind_tile_factory_1_W;
	1,3:	ind_tile_factory_1_S;
	
	2,0:	ind_tile_factory_1_N;
	2,1:	ind_tile_factory_1_E;
	3,0:	ind_tile_factory_1_W;
	3,1:	ind_tile_factory_1_S;
	
	2,2:	ind_tile_factory_1_N;
	2,3:	ind_tile_factory_1_E;
	3,2:	ind_tile_factory_1_W;
	3,3:	ind_tile_factory_1_S;
}

/* // Industry Construction Switches - Read from bottom to top // */


/* Don't allow the same industry within 100 tiles - secondary industries only */
switch (FEAT_INDUSTRIES, SELF, switch_factory_distance_competitor, industry_distance(industry_factory, -1) > 100 ) {1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}


/* Population Check - secondary industries only */

switch (FEAT_INDUSTRIES, PARENT, switch_factory_population_check_2, // Check if there's enough population in the town to support the new industry in additon to whatever industries already exist (300 population per industry)
	population >= LOAD_TEMP(1)) {1: switch_factory_distance_competitor; CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_factory_population_check_1, STORE_TEMP(
	// Count existing processing industries in town
	industry_town_count(industry_oil_refinery,-1)	* 300 +
	industry_town_count(industry_paper_mill,-1) 	* 300 +
	industry_town_count(industry_steel_mill,-1)		* 300 +
	industry_town_count(industry_factory,-1)		* 300 +
	300 // Add population required for this industry
	, 1))
	{switch_factory_population_check_2;}


/* Town Distance Check - secondary industries only */

// Ensure processing industries are near towns. Distance measurement is to town sign, so this adds the town zone radii to scale the distance requirement to the town size
switch (FEAT_INDUSTRIES, SELF, switch_factory_town_distance_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_factory_population_check_1; return CB_RESULT_LOCATION_DISALLOW;} // Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 225 = 15 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_factory_town_distance_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_factory_town_distance_check_2;} // Add up the town zone radii and store it in temporary register 0


/*	Slot Reservations - all industries */

// Compare how many industries are currently on the map with the target number, scaled to the map size from a "normal" 256 x 256 map. If less than the target number, proceed to town distance checks, otherwise disallow construction.
switch (FEAT_INDUSTRIES, SELF, switch_factory_density_high,
	industry_count(industry_factory, -1) < 7 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_factory_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_factory_density_normal,
	industry_count(industry_factory, -1) < 6 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_factory_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_factory_density_low,
	industry_count(industry_factory, -1) < 3 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_factory_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_factory_density_verylow,
	industry_count(industry_factory, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_factory_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

// Get the selected industry density from parameter and redirect to the appropriate switch
switch (FEAT_INDUSTRIES, SELF, switch_factory_density_selector, param_industry_density) {
	0: switch_factory_density_verylow;
	1: switch_factory_density_low;
	2: switch_factory_density_normal;
	3: switch_factory_density_high;
}

/*
Industry Totals on 256 x 256 map:

	Industry		Very Low (10)	Low (25)	Normal (55)		High (80)
	Oil Wells		1				4			8				12
	Farm			1				5			12				12
	Lumber Camp		1				3			8				12
	Coal Mine		1				3			6				12
	Iron Mine		1				3			6				12
	Steel Mill		1				1			2				3
	Factory			1				3			6				7
	Paper Mill		1				1			2				3
	Oil Refinery	1				1			2				3
	Power Plant		1				1			3				4
*/

// If "Generate primary only" parameter enabled, disallow random generation of secondary industries
switch (FEAT_INDUSTRIES, SELF, switch_factory_generate_primary_only, param_primary_only)
	{1: return CB_RESULT_LOCATION_DISALLOW; switch_factory_density_selector;}

// Prospected industries aren't restricted by industry totals, but must meet other requirements
switch (FEAT_INDUSTRIES, SELF, switch_factory_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_factory_town_distance_check_1; switch_factory_generate_primary_only;}

// Funded industries have no restrictions
switch (FEAT_INDUSTRIES, SELF, switch_factory_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_factory_allow_prospected;}

if (param_food_factory == 0) {
item (FEAT_INDUSTRIES, industry_factory) {
	property {
		substitute:				INDUSTRYTYPE_TEMPERATE_FACTORY;
		life_type:				IND_LIFE_TYPE_PROCESSING;
		cargo_types:			[
								accept_cargo("STEL", produce_cargo("GOOD",1)),
								accept_cargo("WOOD", produce_cargo("GOOD",1)),
								accept_cargo("RFPR", produce_cargo("GOOD",1)),
								accept_cargo("PASS"),
								produce_cargo("PASS",10),
		];
		name:					TTD_STR_INDUSTRY_NAME_FACTORY;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_FACTORY));
		prob_map_gen:			3;
		prob_in_game:			3;
		fund_cost_multiplier:	100;
		layouts:				[industry_layout_factory_2x2, industry_layout_factory_1x2, industry_layout_factory_2x1];
		conflicting_ind_types:	[industry_steel_mill];
	}
	graphics {
		location_check:			switch_factory_allow_funded;
		colour:					COLOUR_PALE_GREEN;
		construction_probability:	(current_year >= 1800 && param_primary_only == 0) ? 1 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE_1800);
	}
}}

if (param_food_factory == 1) {
item (FEAT_INDUSTRIES, industry_factory) {
	property {
		substitute:				INDUSTRYTYPE_TEMPERATE_FACTORY;
		life_type:				IND_LIFE_TYPE_PROCESSING;
		spec_flags:				(param_primary_only == 1) ? bitmask(IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION) : 0;
		cargo_types:			[
								accept_cargo("STEL", produce_cargo("GOOD",1)),
								accept_cargo("WOOD", produce_cargo("GOOD",1)),
								accept_cargo("RFPR", produce_cargo("GOOD",1)),
								accept_cargo("FOOD", produce_cargo("GOOD",1)),
								accept_cargo("PASS"),
								produce_cargo("PASS",10),
		];
		name:					TTD_STR_INDUSTRY_NAME_FACTORY;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_FACTORY));
		prob_map_gen:			3;
		prob_in_game:			3;
		fund_cost_multiplier:	100;
		layouts:				[industry_layout_factory_2x2, industry_layout_factory_1x2, industry_layout_factory_2x1];
		conflicting_ind_types:	[industry_steel_mill];
	}
	graphics {
		location_check:			switch_factory_allow_funded;
		colour:					COLOUR_PALE_GREEN;
		construction_probability:	(current_year >= 1800) ? 1 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE_1800);
	}
}}



switch (FEAT_OBJECTS, SELF, switch_object_graphics_factory_1, relative_pos) {
	relative_coord(0, 0): sprlay_factory_1_N;
	relative_coord(0, 1): sprlay_factory_1_E;
	relative_coord(1, 0): sprlay_factory_1_W;
    relative_coord(1, 1): sprlay_factory_1_S;
}

item (FEAT_OBJECTS, object_item_factory_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_FACTORY;
		climates_available:		ALL_CLIMATES;
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,2];
		introduction_date:		1800;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_factory_1;
		colour:					COLOUR_PALE_GREEN;
	}
}

// End Factory
// Begin Sawmill

spritelayout sprlay_logging_camp_1 {
	ground		{sprite:2022;}
	building	{sprite:2070;}
}

spritelayout sprlay_logging_camp_2 {
	ground		{sprite:2022;}
	building	{sprite:2071;}
}

spritelayout sprlay_logging_camp_3 {
	ground		{sprite:2022;}
	building	{sprite:2063;}
}

spritelayout sprlay_logging_camp_4 {
	ground		{sprite:2022;}
	building	{sprite:2069;}
}

spritelayout sprlay_logging_camp_5 {
	ground		{sprite:2022;}
	building	{sprite:2066;}
}

spritelayout sprlay_logging_camp_6 {
	ground		{sprite:2022;}
}

item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_1) {
	property {
		substitute:				11;
	}
	graphics {
		default:				sprlay_logging_camp_1;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_2) {
	property {
		substitute:				02;
	}
	graphics {
		default:				sprlay_logging_camp_2;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_3) {
	property {
		substitute:				02;
	}
	graphics {
		default:				sprlay_logging_camp_3;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_4) {
	property {
		substitute:				02;
	}
	graphics {
		default:				sprlay_logging_camp_4;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_5) {
	property {
		substitute:				02;
	}
	graphics {
		default:				sprlay_logging_camp_5;
	}
}
item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_6) {
	property {
		substitute:				02;
	}
	graphics {
		default:				sprlay_logging_camp_6;
	}
}

tilelayout industry_layout_logging_camp_1 {
	0,0:	ind_tile_logging_camp_5;	0,1:	ind_tile_logging_camp_6;	0,2:	ind_tile_logging_camp_4;
	1,0:	ind_tile_logging_camp_3;	1,1:	ind_tile_logging_camp_1;	1,2:	ind_tile_logging_camp_2;
}

switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_production_check_1, last_month_transported("WOOD") > 0 && transported_last_month_pct("WOOD") > 60) {1: return 1; return 0;}

switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_location_check_7, nearby_tile_class(2,0) == TILE_CLASS_TREES || nearby_tile_class(2,1) == TILE_CLASS_TREES || nearby_tile_class(2,2) == TILE_CLASS_TREES && nearby_tile_class(0,3) == TILE_CLASS_TREES || nearby_tile_class(1,3) == TILE_CLASS_TREES) {1: CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW;} // Check for trees near camp. Not every tile must have a tree - just one on each side southeast and southwest of the industry.

switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_location_check_6, extra_callback_info2 == IND_CREATION_GENERATION) {1: CB_RESULT_LOCATION_ALLOW; switch_logging_camp_location_check_7;} // Ignore tree requirement when generating map, since industries are generated before trees.

switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_location_check_5, industry_distance(industry_paper_mill,-1) >= 60 && industry_distance(industry_farm,-1) >= 30 && industry_distance(industry_logging_camp,-1) >= 30) {1: switch_logging_camp_location_check_6; CB_RESULT_LOCATION_DISALLOW;} // Don't allow construction within 60 tiles (Manhattan) of paper mill
switch (FEAT_INDUSTRIES, PARENT, switch_logging_camp_location_check_4, is_city) {1: return CB_RESULT_LOCATION_DISALLOW; switch_logging_camp_location_check_5;} // Logging camps don't build in cities
switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_location_check_3, town_euclidean_dist(0,0) >= LOAD_TEMP(0)+400) {1: switch_logging_camp_location_check_4; return CB_RESULT_LOCATION_DISALLOW;} // Add 20 to the town zone radii and check if the distance to the town sign is larger than that radius. The town zone radii and distance check use the square of the distance, thus 64 = 8 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_logging_camp_location_check_2, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_logging_camp_location_check_3;} // Add up the town zone radii and store it in temporary register 0


/*	Slot Reservations - all industries */

// Compare how many industries are currently on the map with the target number, scaled to the map size from a "normal" 256 x 256 map. If less than the target number, proceed to town distance checks, otherwise disallow construction.
switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_density_high,
	industry_count(industry_logging_camp, -1) < 12 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_logging_camp_location_check_2; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_density_normal,
	industry_count(industry_logging_camp, -1) < 6 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_logging_camp_location_check_2; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_density_low,
	industry_count(industry_logging_camp, -1) < 3 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_logging_camp_location_check_2; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_density_verylow,
	industry_count(industry_logging_camp, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_logging_camp_location_check_2; return CB_RESULT_LOCATION_DISALLOW;}

// Get the selected industry density from parameter and redirect to the appropriate switch
switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_density_selector, param_industry_density) {
	0: switch_logging_camp_density_verylow;
	1: switch_logging_camp_density_low;
	2: switch_logging_camp_density_normal;
	3: switch_logging_camp_density_high;
}

/*
Industry Totals on 256 x 256 map:

	Industry		Very Low (10)	Low (25)	Normal (55)		High (80)
	Oil Wells		1				4			8				12
	Farm			1				5			12				12
	Lumber Camp		1				3			8				12
	Coal Mine		1				3			6				12
	Iron Mine		1				3			6				12
	Steel Mill		1				1			2				3
	Factory			1				3			6				7
	Paper Mill		1				1			2				3
	Oil Refinery	1				1			2				3
	Power Plant		1				1			3				4
*/

// Prospected industries aren't restricted by industry totals, but must meet other requirements
switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_logging_camp_location_check_2; switch_logging_camp_density_selector;}

// Funded industries have no restrictions
switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_logging_camp_allow_prospected;}

item (FEAT_INDUSTRIES, industry_logging_camp) {
	property {
		substitute:				INDUSTRYTYPE_LUMBER_MILL;
		life_type:				IND_LIFE_TYPE_PROCESSING;
		cargo_types:			[produce_cargo("WOOD",2),];
		spec_flags:				bitmask(IND_FLAG_CUT_TREES);
		name:					string(STR_NAME_LOGGING_CAMP);
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_LOGGING_CAMP));
		prob_map_gen:			15;
		prob_in_game:			15;
		fund_cost_multiplier:	40;
		layouts:				[industry_layout_logging_camp_1,];
	}
	graphics {
		location_check:			switch_logging_camp_allow_funded;
		control_special:		switch_logging_camp_production_check_1;
		extra_text_industry:	string(STR_EXTRA_TEXT_LOGGING_CAMP);
		construction_probability:	1;
	}
}

item (FEAT_OBJECTS, object_item_logging_camp_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_LOGGING_CAMP);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_logging_camp_1;
	}
}

item (FEAT_OBJECTS, object_item_logging_camp_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_LOGGING_CAMP);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_logging_camp_2;
	}
}

item (FEAT_OBJECTS, object_item_logging_camp_3) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_LOGGING_CAMP);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_logging_camp_3;
	}
}

item (FEAT_OBJECTS, object_item_logging_camp_4) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_LOGGING_CAMP);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_logging_camp_4;
	}
}

item (FEAT_OBJECTS, object_item_logging_camp_5) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_LOGGING_CAMP);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_logging_camp_5;
	}
}
item (FEAT_OBJECTS, object_item_logging_camp_6) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_LOGGING_CAMP);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE,OBJ_FLAG_ALLOW_BRIDGE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1700;
		num_views:				1;
	}
	graphics {
		default:				sprlay_logging_camp_6;
	}
}

// End Sawmill
// Begin Paper Mill

spritelayout sprlay_paper_mill_9_N {
	ground		{sprite:3981;}
	building	{sprite:2169; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_9_E {
	ground		{sprite:3981;}
	building	{sprite:2170; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_9_W {
	ground		{sprite:3981;}
	building	{sprite:2171; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_9_S {
	ground		{sprite:3981;}
	building	{sprite:2172; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}

spritelayout sprlay_paper_mill_chem_1 { // Tall tank
	ground		{sprite:1420;}
	building	{sprite:2083; yoffset:4; xoffset:4; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_chem_2 { // Pipe frame 1
	ground		{sprite:1420;}
	building	{sprite:2089; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_chem_3 { // Pipe frame 2
	ground		{sprite:1420;}
	building	{sprite:2092; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_paper_mill_logs_1 {
	ground		{sprite:2022;}
	building	{sprite:2071;}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_9_N) {
	property {
		substitute:				02;
		accepted_cargos:		[[WOOD, 8],[RFPR, 8],[PASS, 8]];}
	graphics {default:			sprlay_paper_mill_9_N;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_9_E) {
	property {
		substitute:				02;
		accepted_cargos:		[[WOOD, 8],[RFPR, 8],[PASS, 8]];}
	graphics {default:			sprlay_paper_mill_9_E;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_9_W) {
	property {
		substitute:				02;
		accepted_cargos:		[[WOOD, 8],[RFPR, 8],[PASS, 8]];}
	graphics {default:			sprlay_paper_mill_9_W;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_9_S) {
	property {
		substitute:				02;
		accepted_cargos:		[[WOOD, 8],[RFPR, 8],[PASS, 8]];}
	graphics {default:			sprlay_paper_mill_9_S;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_chem_1) {
	property {
		substitute:				02;
		accepted_cargos:		[[WOOD, 8],[RFPR, 8],[PASS, 8]];}
	graphics {default:			sprlay_paper_mill_chem_1;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_chem_2) {
	property {
		substitute:				02;
		accepted_cargos:		[[WOOD, 8],[RFPR, 8],[PASS, 8]];}
	graphics {default:			sprlay_paper_mill_chem_2;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_chem_3) {
	property {
		substitute:				02;
		accepted_cargos:		[[WOOD, 8],[RFPR, 8],[PASS, 8]];}
	graphics {default:			sprlay_paper_mill_chem_3;}
}
item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_logs_1) {
	property {
		substitute:				02;
		accepted_cargos:		[[WOOD, 8],[RFPR, 8],[PASS, 8]];}
	graphics {default:			sprlay_paper_mill_logs_1;}
}

tilelayout industry_layout_paper_mill_1 {
0,0:	ind_tile_paper_mill_9_N;	0,1:	ind_tile_paper_mill_9_E;	0,2:	ind_tile_paper_mill_chem_2;	0,3:	ind_tile_paper_mill_chem_1;
1,0:	ind_tile_paper_mill_9_W;	1,1:	ind_tile_paper_mill_9_S;	1,2:	ind_tile_paper_mill_9_N;	1,3:	ind_tile_paper_mill_9_E;
2,0:	ind_tile_paper_mill_chem_1;	2,1:	ind_tile_paper_mill_chem_3;	2,2:	ind_tile_paper_mill_9_W;	2,3:	ind_tile_paper_mill_9_S;
3,0:	ind_tile_paper_mill_9_N;	3,1:	ind_tile_paper_mill_9_E;	3,2:	ind_tile_paper_mill_logs_1;	3,3:	ind_tile_paper_mill_logs_1;
4,0:	ind_tile_paper_mill_9_W;	4,1:	ind_tile_paper_mill_9_S;	4,2:	ind_tile_paper_mill_logs_1;	4,3:	ind_tile_paper_mill_logs_1;
}

/* // Industry Construction Switches - Read from bottom to top // */

/* Don't allow the same industry within 100 tiles - secondary industries only */
switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_distance_competitor, industry_distance(industry_paper_mill, -1) > 100 ) {1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}

/* Second industry switch - only use one per industry */

// Only allow a second paper mill if a steel mill and factory already exist. Prevents duplicate industries from hogging limited population on a small or early map.
switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_second_2, industry_count(industry_steel_mill,-1) > 0 && industry_count(industry_factory,-1) > 0 ) {1: switch_paper_mill_distance_competitor; CB_RESULT_LOCATION_DISALLOW;} 
switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_second_1, // Check if this will be the second paper mill in the world
	industry_count(industry_paper_mill,-1) == 1) {1: switch_paper_mill_second_2; switch_paper_mill_distance_competitor;}


/* Population Check - secondary industries only */

switch (FEAT_INDUSTRIES, PARENT, switch_paper_mill_population_check_2, // Check if there's enough population in the town to support the new industry in additon to whatever industries already exist (300 population per industry)
	population >= LOAD_TEMP(1)) {1: switch_paper_mill_second_1; CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_population_check_1, STORE_TEMP(
	// Count existing processing industries in town
	industry_town_count(industry_oil_refinery,-1)	* 300 +
	industry_town_count(industry_paper_mill,-1) 	* 300 +
	industry_town_count(industry_steel_mill,-1)		* 300 +
	industry_town_count(industry_factory,-1)		* 300 +
	300 // Add population required for this industry
	, 1))
	{switch_paper_mill_population_check_2;}


/* Town Distance Check - secondary industries only */

// Ensure processing industries are near towns. Distance measurement is to town sign, so this adds the town zone radii to scale the distance requirement to the town size
switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_town_distance_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_paper_mill_population_check_1; return CB_RESULT_LOCATION_DISALLOW;} // Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 225 = 15 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_paper_mill_town_distance_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_paper_mill_town_distance_check_2;} // Add up the town zone radii and store it in temporary register 0


/*	Slot Reservations - all industries */

// Compare how many industries are currently on the map with the target number, scaled to the map size from a "normal" 256 x 256 map. If less than the target number, proceed to town distance checks, otherwise disallow construction.
switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_density_high,
	industry_count(industry_paper_mill, -1) < 3 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_paper_mill_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_density_normal,
	industry_count(industry_paper_mill, -1) < 2 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_paper_mill_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_density_low,
	industry_count(industry_paper_mill, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_paper_mill_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_density_verylow,
	industry_count(industry_paper_mill, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_paper_mill_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

// Get the selected industry density from parameter and redirect to the appropriate switch
switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_density_selector, param_industry_density) {
	0: switch_paper_mill_density_verylow;
	1: switch_paper_mill_density_low;
	2: switch_paper_mill_density_normal;
	3: switch_paper_mill_density_high;
}

/*
Industry Totals on 256 x 256 map:

	Industry		Very Low (10)	Low (25)	Normal (55)		High (80)
	Oil Wells		1				4			8				12
	Farm			1				5			12				12
	Lumber Camp		1				3			8				12
	Coal Mine		1				3			6				12
	Iron Mine		1				3			6				12
	Steel Mill		1				1			2				3
	Factory			1				3			6				7
	Paper Mill		1				1			2				3
	Oil Refinery	1				1			2				3
	Power Plant		1				1			3				4
*/

// If "Generate primary only" parameter enabled, disallow random generation of secondary industries
switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_generate_primary_only, param_primary_only)
	{1: return CB_RESULT_LOCATION_DISALLOW; switch_paper_mill_density_selector;}

// Prospected industries aren't restricted by industry totals, but must meet other requirements
switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_paper_mill_town_distance_check_1; switch_paper_mill_generate_primary_only;}

// Funded industries have no restrictions
switch (FEAT_INDUSTRIES, SELF, switch_paper_mill_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_paper_mill_allow_prospected;}

item (FEAT_INDUSTRIES, industry_paper_mill) {
	property {
		substitute:				INDUSTRYTYPE_PAPER_MILL;
		life_type:				IND_LIFE_TYPE_PROCESSING;
		spec_flags:				(param_primary_only == 1) ? bitmask(IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION) : 0;
		cargo_types:			[
								accept_cargo("WOOD", produce_cargo("GOOD",1)),
								accept_cargo("RFPR", produce_cargo("GOOD",1)),
								accept_cargo("PASS"),
								produce_cargo("PASS",8),
		];
		name:					TTD_STR_INDUSTRY_NAME_PAPER_MILL;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_PAPER_MILL));
		prob_map_gen:			1;
		prob_in_game:			1;
		fund_cost_multiplier:	100;
		map_colour:				184;
		layouts:				[industry_layout_paper_mill_1,];
	}
	graphics {
		location_check:			switch_paper_mill_allow_funded;
		construction_probability:	(current_year >= 1885) ? 1 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE_1885);
		colour:					COLOUR_DARK_GREEN;
	}
}

switch (FEAT_OBJECTS, SELF, switch_object_graphics_paper_mill_9, relative_pos) {
	relative_coord(0, 0): sprlay_paper_mill_9_N;
	relative_coord(0, 1): sprlay_paper_mill_9_E;
	relative_coord(1, 0): sprlay_paper_mill_9_W;
    relative_coord(1, 1): sprlay_paper_mill_9_S;
}

item (FEAT_OBJECTS, object_item_paper_mill_9) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_PAPER_MILL;
		climates_available:		ALL_CLIMATES;
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[2,2];
		introduction_date:		1845;
		num_views:				1;
	}
	graphics {
		default:				switch_object_graphics_paper_mill_9;
		colour:					COLOUR_DARK_GREEN;
	}
}

// End Paper Mill
// Begin Oil Wells

spritelayout sprlay_oil_wells_1_a { 
	ground		{sprite:2173;}
	building	{sprite:2174;}
}
spritelayout sprlay_oil_wells_1_b { 
	ground		{sprite:2173;}
	building	{sprite:2175;}
}
spritelayout sprlay_oil_wells_1_c { 
	ground		{sprite:2173;}
	building	{sprite:2176;}
}
spritelayout sprlay_oil_wells_1_d { 
	ground		{sprite:2173;}
	building	{sprite:2177;}
}
spritelayout sprlay_oil_wells_1_e { 
	ground		{sprite:2173;}
	building	{sprite:2178;}
}
spritelayout sprlay_oil_wells_1_f { 
	ground		{sprite:2173;}
	building	{sprite:2179;}
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_animation, animation_frame) {
	1:	sprlay_oil_wells_1_a;
	2:	sprlay_oil_wells_1_b;
	3:	sprlay_oil_wells_1_c;
	4:	sprlay_oil_wells_1_d;
	5:	sprlay_oil_wells_1_e;
	6:	sprlay_oil_wells_1_f;
	7:	sprlay_oil_wells_1_e;
	8:	sprlay_oil_wells_1_d;
	9:	sprlay_oil_wells_1_c;
	10:	sprlay_oil_wells_1_b;
	11:	sprlay_oil_wells_1_a;
	12:	sprlay_oil_wells_1_b;
	13:	sprlay_oil_wells_1_c;
	14:	sprlay_oil_wells_1_d;
	15:	sprlay_oil_wells_1_e;
	16:	sprlay_oil_wells_1_f;
	17:	sprlay_oil_wells_1_e;
	18:	sprlay_oil_wells_1_d;
	19:	sprlay_oil_wells_1_c;
	20:	sprlay_oil_wells_1_b;
	sprlay_oil_wells_1_a;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_stop_anim, animation_frame) {
	1: return 11; // jump to the 'stop animation cycle' when triggered and currently animated
	2: return 12;
	3: return 13;
	4: return 14;
	5: return 15;
	6: return 16;
	7: return 17;
	8: return 18;
	9: return 19;
	10: return 20;
	return CB_RESULT_DO_NOTHING;
}
switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_start_anim, animation_frame) {
	11: return 1;
	12: return 2;
	13: return 3;
	14: return 4;
	15: return 5;
	16: return 6;
	17: return 7;
	18: return 8;
	19: return 9;
	20: return 10;
	return CB_RESULT_START_ANIMATION;
}

random_switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_random_anim_trigger_switch, bitmask(TRIGGER_INDUSTRYTILE_TILELOOP)) {
	1: return oil_wells_tile_1_stop_anim;
	1: return oil_wells_tile_1_start_anim;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_next_frame_switch, animation_frame) {
	10: return 1;
	11: return CB_RESULT_STOP_ANIMATION; // Don't actually stop animation, just keep looping the same frame over and over. // CB_RESULT_STOP_ANIMATION
	20: return 11;
	return CB_RESULT_NEXT_FRAME;
}

switch (FEAT_INDUSTRYTILES, SELF, oil_wells_tile_1_graphics_switch, construction_state) {
	1: sprlay_oil_wells_1_a;
	2: sprlay_oil_wells_1_a;
	oil_wells_tile_animation;
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_wells) {
property {
	substitute:				02; 
	animation_info:			[ANIMATION_LOOPING, 20];
	animation_speed:		3;
	animation_triggers:		bitmask(ANIM_TRIGGER_INDTILE_TILE_LOOP);
	special_flags:			bitmask(INDTILE_FLAG_RANDOM_ANIMATION);
	land_shape_flags:		bitmask(LSF_ONLY_ON_FLAT_LAND);
}
graphics {
	anim_control: oil_wells_tile_1_random_anim_trigger_switch;
	anim_next_frame: oil_wells_tile_1_next_frame_switch;
	random_trigger: oil_wells_tile_1_random_anim_trigger_switch;
		oil_wells_tile_1_graphics_switch;
}}

tilelayout industry_layout_oil_wells_1 {
	0,0:	ind_tile_oil_wells;		0,2:	ind_tile_oil_wells;		0,4:	ind_tile_oil_wells;
	2,0:	ind_tile_oil_wells;		2,2:	ind_tile_oil_wells;		2,4:	ind_tile_oil_wells;
}

tilelayout industry_layout_oil_wells_2 {
	0,0:	ind_tile_oil_wells;		0,2:	ind_tile_oil_wells;	
	2,0:	ind_tile_oil_wells;		2,2:	ind_tile_oil_wells;
	4,0:	ind_tile_oil_wells;		4,2:	ind_tile_oil_wells;
}

// If an odd number of industries exist, then must build within 100 tiles of another oil wells
switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_cluster_2, industry_distance(industry_oil_wells, -1) <= 100) {1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}

// Check if an even number of oil wells already exist on the map (0 is even) by dividing by 2 and checking for a remainder. If even, build without needing cluster. If odd, continue to next switch for clustering
switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_cluster_1, industry_count(industry_oil_wells, -1) % 2 == 0) {1: return CB_RESULT_LOCATION_ALLOW; switch_oil_wells_cluster_2;}

// Check if clustering parameter is enabled and smallest map edge is >= 512 (clustering doesn't work well on small maps)
switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_cluster_0, param_mine_cluster == 1 && map_min_edge >= 512) {1: switch_oil_wells_cluster_1; CB_RESULT_LOCATION_ALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_location_check_5, industry_distance(industry_oil_refinery,-1) >= 60 && industry_distance(industry_farm,-1) >= 30 && industry_distance(industry_logging_camp,-1) >= 30) {1: switch_oil_wells_cluster_0; CB_RESULT_LOCATION_DISALLOW;} // Don't allow construction within 60 tiles (Manhattan) of oil refinery, farm, or logging camp
switch (FEAT_INDUSTRIES, PARENT, switch_oil_wells_location_check_4, is_city) {1: return CB_RESULT_LOCATION_DISALLOW; switch_oil_wells_location_check_5;} // Oil wells don't build in cities
switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_location_check_3, town_euclidean_dist(0,0) >= LOAD_TEMP(0)+100) {1: switch_oil_wells_location_check_4; return CB_RESULT_LOCATION_DISALLOW;} // Add 10 to the town zone radii and check if the distance to the town sign is larger than that radius. The town zone radii and distance check use the square of the distance, thus 64 = 8 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_oil_wells_location_check_2, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_oil_wells_location_check_3;} // Add up the town zone radii and store it in temporary register 0
switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_location_check_1, nearby_tile_height(0,0) > 2 && param_elevation_checks == 1) {1: return CB_RESULT_LOCATION_DISALLOW; switch_oil_wells_location_check_2;} // Farms must be built at tile height 2 or below.

/*	Slot Reservations - all industries */

// Compare how many industries are currently on the map with the target number, scaled to the map size from a "normal" 256 x 256 map. If less than the target number, proceed to town distance checks, otherwise disallow construction.
switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_density_high,
	industry_count(industry_oil_wells, -1) < 12 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_oil_wells_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_density_normal,
	industry_count(industry_oil_wells, -1) < 8 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_oil_wells_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_density_low,
	industry_count(industry_oil_wells, -1) < 4 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_oil_wells_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_density_verylow,
	industry_count(industry_oil_wells, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_oil_wells_location_check_1; return CB_RESULT_LOCATION_DISALLOW;}

// Get the selected industry density from parameter and redirect to the appropriate switch
switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_density_selector, param_industry_density) {
	0: switch_oil_wells_density_verylow;
	1: switch_oil_wells_density_low;
	2: switch_oil_wells_density_normal;
	3: switch_oil_wells_density_high;
}

/*
Industry Totals on 256 x 256 map:

	Industry		Very Low (10)	Low (25)	Normal (55)		High (80)
	Oil Wells		1				4			8				12
	Farm			1				5			12				12
	Lumber Camp		1				3			8				12
	Coal Mine		1				3			6				12
	Iron Mine		1				3			6				12
	Steel Mill		1				1			2				3
	Factory			1				3			6				7
	Paper Mill		1				1			2				3
	Oil Refinery	1				1			2				3
	Power Plant		1				1			3				4

*/

// Prospected industries aren't restricted by industry totals, but must meet other requirements
switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_oil_wells_location_check_1; switch_oil_wells_density_selector;}

// Funded industries have no restrictions
switch (FEAT_INDUSTRIES, SELF, switch_oil_wells_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_oil_wells_allow_prospected;}

item (FEAT_INDUSTRIES, industry_oil_wells) {
	property {
		substitute:				INDUSTRYTYPE_OIL_WELLS;
		life_type:				IND_LIFE_TYPE_EXTRACTIVE;
		cargo_types:			[
								produce_cargo("OIL_",12),
		];
		name:					TTD_STR_INDUSTRY_NAME_OIL_WELLS;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_OIL_WELLS));
		prob_map_gen:			15;
		prob_in_game:			15;
		fund_cost_multiplier:	100;
		layouts:				[industry_layout_oil_wells_1, industry_layout_oil_wells_2,];
	}
	graphics {
		location_check:			switch_oil_wells_allow_funded;
		construction_probability:	(current_year >= 1900) ? 1 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE_1900);
	}
}

item (FEAT_OBJECTS, object_item_oil_wells_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_WELLS;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_wells_1_a;
	}
}

// End Oil Wells
// Begin Oil Refinery

spritelayout sprlay_oil_refinery_1 { // Office
	ground		{sprite:1420;}
	building	{sprite:2095; yoffset:2; xoffset:2;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_2 { // Large tank
	ground		{sprite:1420;}
	building	{sprite:2080; yoffset:1; xoffset:1;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_3 { // Tall tank
	ground		{sprite:1420;}
	building	{sprite:2083; yoffset:4; xoffset:4;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_4 { // Burner tower
	ground		{sprite:1420;}
	building	{sprite:2086; yoffset:5; xoffset:5;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_5 { // Pipe frame red
	ground		{sprite:1420;}
	building	{sprite:2089;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_6 { // Pipe frame 2
	ground		{sprite:1420;}
	building	{sprite:2092;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_7 { // Pipe frame 3
	ground		{sprite:1420;}
	building	{sprite:2091;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}
spritelayout sprlay_oil_refinery_8 { // Bare ground
	ground		{sprite:1420;}
}
spritelayout sprlay_oil_refinery_9 { // Food silo
	ground		{sprite:1420;}
	building	{sprite:2196;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

spritelayout sprlay_oil_refinery_10 { // Pumps with boxes
	ground		{sprite:1420;}
	building	{sprite:2349;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

spritelayout sprlay_oil_refinery_11 { // Pumps with reflector
	ground		{sprite:1420;}
	building	{sprite:2352;
				recolour_mode: RECOLOUR_REMAP;
				palette: PALETTE_USE_DEFAULT;}
}

item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_1) { // Office
	property {
		substitute:				02;
		accepted_cargos:		[[OIL_, 8],[PASS, 8]];}
	graphics {default:			sprlay_oil_refinery_1;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_2) { // Large tank
	property {
		substitute:				02;
		accepted_cargos:		[[OIL_, 8],[PASS, 8]];}
	graphics {default:			sprlay_oil_refinery_2;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_3) { // Tall tank
	property {
		substitute:				02;
		accepted_cargos:		[[OIL_, 8],[PASS, 8]];}
	graphics {default:			sprlay_oil_refinery_3;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_4) { // Burner tower
	property {
		substitute:				02;
		accepted_cargos:		[[OIL_, 8],[PASS, 8]];}
	graphics {default:			sprlay_oil_refinery_4;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_5) { // Pipe frame red
	property {
		substitute:				02;
		accepted_cargos:		[[OIL_, 8],[PASS, 8]];}
	graphics {default:			sprlay_oil_refinery_5;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_6) { // Pipe frame 2
	property {
		substitute:				02;
		accepted_cargos:		[[OIL_, 8],[PASS, 8]];}
	graphics {default:			sprlay_oil_refinery_6;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_7) { // Pipe frame 3
	property {
		substitute:				02;
		accepted_cargos:		[[OIL_, 8],[PASS, 8]];}
	graphics {default:			sprlay_oil_refinery_7;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_8) { // Bare ground
	property {
		substitute:				02;
		accepted_cargos:		[[OIL_, 8],[PASS, 8]];}
	graphics {default:			sprlay_oil_refinery_8;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_9) { // Food silo
	property {
		substitute:				02;
		accepted_cargos:		[[OIL_, 8],[PASS, 8]];}
	graphics {default:			sprlay_oil_refinery_9;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_10) { // Pumps with boxes
	property {
		substitute:				02;
		accepted_cargos:		[[OIL_, 8],[PASS, 8]];}
	graphics {default:			sprlay_oil_refinery_10;}
}
item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_11) { // Pump with reflector
	property {
		substitute:				02;
		accepted_cargos:		[[OIL_, 8],[PASS, 8]];}
	graphics {default:			sprlay_oil_refinery_11;}
}

tilelayout industry_layout_oil_refinery_1 {
0,0:	ind_tile_oil_refinery_2;	0,1:	ind_tile_oil_refinery_10;	0,2: 	ind_tile_oil_refinery_5;	0,3:	ind_tile_oil_refinery_6;	0,4:	ind_tile_oil_refinery_7;
1,0:	ind_tile_oil_refinery_2;	1,1:	ind_tile_oil_refinery_1;	1,2:	ind_tile_oil_refinery_5;	1,3:	ind_tile_oil_refinery_6;	1,4:	ind_tile_oil_refinery_7;

3,0:	ind_tile_oil_refinery_3;	3,1:	ind_tile_oil_refinery_6;	3,2:	ind_tile_oil_refinery_4;	3,3:	ind_tile_oil_refinery_11;	3,4:	ind_tile_oil_refinery_10;
4,0:	ind_tile_oil_refinery_3;	4,1:	ind_tile_oil_refinery_5;	4,2:	ind_tile_oil_refinery_7;	4,3:	ind_tile_oil_refinery_11;	4,4:	ind_tile_oil_refinery_10;

6,0:	ind_tile_oil_refinery_2;	6,1:	ind_tile_oil_refinery_2;	6,2:	ind_tile_oil_refinery_2;	6,3:	ind_tile_oil_refinery_2;	6,4:	ind_tile_oil_refinery_1;
7,0:	ind_tile_oil_refinery_2;	7,1:	ind_tile_oil_refinery_2;	7,2:	ind_tile_oil_refinery_2;	7,3:	ind_tile_oil_refinery_2;	7,4:	ind_tile_oil_refinery_2;
}

/* // Industry Construction Switches - Read from bottom to top // */



// Oil refinery must be within 15 tiles of water
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_distance_water, water_distance > 15 && param_refinery_water == 1 && game_mode != GAMEMODE_EDITOR) {1: CB_RESULT_LOCATION_DISALLOW; CB_RESULT_LOCATION_ALLOW;}

/* Don't allow the same industry within 100 tiles - secondary industries only */
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_distance_competitor, industry_distance(industry_oil_refinery, -1) > 100 ) {1: switch_oil_refinery_distance_water; CB_RESULT_LOCATION_DISALLOW;}



/* Second industry switch - secondary industries only except Factory; only use one per industry */

// Only allow a second oil refinery if a paper mill, steel mill, and factory already exist. Prevents duplicate industries from hogging limited population on a small or early map.
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_second_2, industry_count(industry_steel_mill,-1) > 0 && industry_count(industry_factory,-1) > 0 ) {1: switch_oil_refinery_distance_competitor; CB_RESULT_LOCATION_DISALLOW;} // Only allow a second paper mill if a steel mill and factory already exist
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_second_1, // Check if this will be the second oil refinery in the world
	industry_count(industry_oil_refinery,-1) == 1) {1: switch_oil_refinery_second_2; switch_oil_refinery_distance_competitor;}


/* Population Check - secondary industries only */

switch (FEAT_INDUSTRIES, PARENT, switch_oil_refinery_population_check_2, // Check if there's enough population in the town to support the new industry in additon to whatever industries already exist (300 population per industry)
	population >= LOAD_TEMP(1)) {1: switch_oil_refinery_second_1; CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_population_check_1, STORE_TEMP(
	// Count existing processing industries in town
	industry_town_count(industry_oil_refinery,-1)	* 300 +
	industry_town_count(industry_paper_mill,-1) 	* 300 +
	industry_town_count(industry_steel_mill,-1)		* 300 +
	industry_town_count(industry_factory,-1)		* 300 +
	300 // Add population required for this industry
	, 1))
	{switch_oil_refinery_population_check_2;}


/* Town Distance Check - secondary industries only */

// Ensure processing industries are near towns. Distance measurement is to town sign, so this adds the town zone radii to scale the distance requirement to the town size
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_town_distance_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_oil_refinery_population_check_1; return CB_RESULT_LOCATION_DISALLOW;} // Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 225 = 15 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_oil_refinery_town_distance_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_oil_refinery_town_distance_check_2;} // Add up the town zone radii and store it in temporary register 0


/*	Slot Reservations - all industries */

// Compare how many industries are currently on the map with the target number, scaled to the map size from a "normal" 256 x 256 map. If less than the target number, proceed to town distance checks, otherwise disallow construction.
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_density_high,
	industry_count(industry_oil_refinery, -1) < 3 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_oil_refinery_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_density_normal,
	industry_count(industry_oil_refinery, -1) < 2 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_oil_refinery_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_density_low,
	industry_count(industry_oil_refinery, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_oil_refinery_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_density_verylow,
	industry_count(industry_oil_refinery, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_oil_refinery_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

// Get the selected industry density from parameter and redirect to the appropriate switch
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_density_selector, param_industry_density) {
	0: switch_oil_refinery_density_verylow;
	1: switch_oil_refinery_density_low;
	2: switch_oil_refinery_density_normal;
	3: switch_oil_refinery_density_high;
}

/*
Industry Totals on 256 x 256 map:

	Industry		Very Low (10)	Low (25)	Normal (55)		High (80)
	Oil Wells		1				4			8				12
	Farm			1				5			12				12
	Lumber Camp		1				3			8				12
	Coal Mine		1				3			6				12
	Iron Mine		1				3			6				12
	Steel Mill		1				1			2				3
	Factory			1				3			6				7
	Paper Mill		1				1			2				3
	Oil Refinery	1				1			2				3
	Power Plant		1				1			3				4
*/

// If "Generate primary only" parameter enabled, disallow random generation of secondary industries
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_generate_primary_only, param_primary_only)
	{1: return CB_RESULT_LOCATION_DISALLOW; switch_oil_refinery_density_selector;}

// Prospected industries aren't restricted by industry totals, but must meet other requirements
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_allow_prospected, extra_callback_info2 == IND_CREATION_PROSPECT || game_mode == GAMEMODE_EDITOR)
	{1: switch_oil_refinery_town_distance_check_1; switch_oil_refinery_generate_primary_only;}

// Funded industries have no restrictions
switch (FEAT_INDUSTRIES, SELF, switch_oil_refinery_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_oil_refinery_allow_prospected;}

item (FEAT_INDUSTRIES, industry_oil_refinery) {
	property {
		substitute:				INDUSTRYTYPE_OIL_REFINERY;
		life_type:				IND_LIFE_TYPE_PROCESSING;
		spec_flags:				(param_primary_only == 1) ? bitmask(IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION) : 0;
		cargo_types:			[
								accept_cargo("OIL_", produce_cargo("RFPR",1)),
								accept_cargo("PASS"),
								produce_cargo("PASS",6),
		];
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_OIL_REFINERY));
		prob_map_gen:			1;
		prob_in_game:			1;
		fund_cost_multiplier:	100;
		layouts:				[industry_layout_oil_refinery_1,];
		map_colour:				191;
	}
	graphics {
		location_check:			switch_oil_refinery_allow_funded;
		construction_probability:	(current_year >= 1900) ? 1 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE_1900);
		colour:					COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_1;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_2;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_3) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_3;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_4) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_4;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_5) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_5;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_6) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_6;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_7) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_7;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_8) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_8;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_9) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_9;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_10) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_10;
		colour:			COLOUR_YELLOW;
	}
}

item (FEAT_OBJECTS, object_item_oil_refinery_11) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					TTD_STR_INDUSTRY_NAME_OIL_REFINERY;
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_oil_refinery_11;
		colour:			COLOUR_YELLOW;
	}
}

// End Oil Refinery