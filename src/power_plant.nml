// Begin Power Plant

spritelayout sprlay_power_plant_1 { // Powerhouse
	ground		{sprite:1420;}
	building	{sprite:2050;}
}

spritelayout sprlay_power_plant_2 { // Power terminals
	ground		{sprite:1420;}
	building	{sprite:2053;}
}

spritelayout sprlay_power_plant_3 { // Transformers
	ground		{sprite:1420;}
	building	{sprite:2054; yoffset:2;}
}

spritelayout sprlay_power_plant_4 { // Cooling tower
	ground		{sprite:3981;}
	building	{sprite:2047;}
}
spritelayout sprlay_power_plant_5_N { // Coal pile N
	ground		{sprite:2022;}
	building	{sprite:2023;}
}

spritelayout sprlay_power_plant_5_W { // Coal pile W
	ground		{sprite:2022;}
	building	{sprite:2024;}
}

switch (FEAT_INDUSTRYTILES, SELF, switch_power_plant_cooling_tower_availability, current_year >= 1918) {1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_1) { // Powerhouse
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {default:		sprlay_power_plant_1;}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_2) { // Power terminals
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {default:		sprlay_power_plant_2;}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_3) { // Transformers
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {default:		sprlay_power_plant_3;}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_4) { // Cooling tower
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {
	default:	sprlay_power_plant_4;
	tile_check:	switch_power_plant_cooling_tower_availability;
}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_5_N) { // Coal pile N
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {default:		sprlay_power_plant_5_N;}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_5_W) { // Coal pile W
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {default:		sprlay_power_plant_5_W;}}


tilelayout industry_layout_power_plant_1 {
0,0:	ind_tile_power_plant_1;	0,1:	ind_tile_power_plant_1;
1,0:	ind_tile_power_plant_2;	1,1:	ind_tile_power_plant_2;
2,0:	ind_tile_power_plant_3;	2,1:	ind_tile_power_plant_3;
}

tilelayout industry_layout_power_plant_2 {
0,0:	ind_tile_power_plant_1;	0,1:	ind_tile_power_plant_5_N;
1,0:	ind_tile_power_plant_1;	1,1:	ind_tile_power_plant_5_W;
2,0:	ind_tile_power_plant_2;	2,1:	ind_tile_power_plant_3;
}

tilelayout industry_layout_power_plant_3 {
/*0,0:	clear;	*/				0,1:	ind_tile_power_plant_4;		/*0,2:	clear;*/	0,3:	ind_tile_power_plant_1;	0,4:	ind_tile_power_plant_5_N;
1,0:	ind_tile_power_plant_4;	/*1,1:	clear;	*/					/*1,2:	clear;*/	1,3:	ind_tile_power_plant_1;	1,4:	ind_tile_power_plant_5_W;
/*2,0:	clear;	*/				2,1:	ind_tile_power_plant_4;		/*2,2:	clear;*/	2,3:	ind_tile_power_plant_2;	2,4:	ind_tile_power_plant_3;
}

tilelayout industry_layout_power_plant_4 {
0,0:	ind_tile_power_plant_5_N;	0,1:	ind_tile_power_plant_1;
1,0:	ind_tile_power_plant_5_W;	1,1:	ind_tile_power_plant_1;
2,0:	ind_tile_power_plant_3;		2,1:	ind_tile_power_plant_2;
}

tilelayout industry_layout_power_plant_5 {
0,0:	ind_tile_power_plant_4;	/*0,1:	clear;	*/					0,2:	ind_tile_power_plant_4;
/*1,0:	clear;	*/				/*1,1:	clear;	*/					/*1,2:	clear;*/
2,0:	ind_tile_power_plant_1;	2,1:	ind_tile_power_plant_3;		2,2:	ind_tile_power_plant_1;
3,0:	ind_tile_power_plant_2;	3,1:	ind_tile_power_plant_2;		3,2:	ind_tile_power_plant_2;
4,0:	ind_tile_power_plant_1;	4,1:	ind_tile_power_plant_3;		4,2:	ind_tile_power_plant_1;
/*5,0:	clear;	*/				/*5,1:	clear;*/					/*5,2:	clear;*/
6,0:	ind_tile_power_plant_4;	/*6,1:	clear;*/					6,2:	ind_tile_power_plant_4;
}

switch (FEAT_INDUSTRIES, PARENT, switch_power_plant_population_adder_total_1, [ // Check if there's enough population in the town to support the new industry in additon to whatever industries already exist (300 population per industry)
STORE_TEMP(LOAD_TEMP(1)*200 + LOAD_TEMP(2)*300 + LOAD_TEMP(3)*300 + LOAD_TEMP(4)*300, 0),
population >= LOAD_TEMP(0)+200,])

{1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_power_plant_population_adder_oil_refinery_2, STORE_TEMP(industry_town_count(industry_oil_refinery,-1), 4)) {switch_power_plant_population_adder_total_1;} // If oil refinery available, store number of oil refineries in this town
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_population_adder_oil_refinery_1, current_year >= 1800) {1: switch_power_plant_population_adder_oil_refinery_2; switch_power_plant_population_adder_total_1;} // Check if oil refinery available in current year

switch (FEAT_INDUSTRIES, SELF, switch_power_plant_population_adder_paper_mill_2, STORE_TEMP(industry_town_count(industry_paper_mill,-1), 3)) {switch_power_plant_population_adder_oil_refinery_1;} // If paper mill available, store number of factories in this town
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_population_adder_paper_mill_1, current_year >= 1800) {1: switch_power_plant_population_adder_paper_mill_2; switch_power_plant_population_adder_total_1;} // Check if power_plant available in current year

switch (FEAT_INDUSTRIES, SELF, switch_power_plant_population_adder_steel_mill_2, STORE_TEMP(industry_town_count(industry_steel_mill,-1), 2)) {switch_power_plant_population_adder_paper_mill_1;} // If steel mill available, store number of steel mills in this town
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_population_adder_steel_mill_1, current_year >= 1856) {1: switch_power_plant_population_adder_steel_mill_2; switch_power_plant_population_adder_total_1;} // Check if steel mills available in current year

switch (FEAT_INDUSTRIES, SELF, switch_power_plant_population_adder_factory_2, STORE_TEMP(industry_town_count(industry_factory,-1), 1)) {switch_power_plant_population_adder_steel_mill_1;} // If factory available, store number of factories in this town
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_population_adder_factory_1, current_year >= 1800) {1: switch_power_plant_population_adder_factory_2; switch_power_plant_population_adder_total_1;} // Check if factory available in current year

switch (FEAT_INDUSTRIES, SELF, switch_power_plant_location_check_4, // Don't allow a second oil refinery to be constructed unless other types have at least one
	industry_count(industry_steel_mill,-1) >= 1 || industry_count(industry_paper_mill,-1) >= 1 || industry_count(industry_factory,-1) >= 1 )
	{1: switch_power_plant_population_adder_factory_1; CB_RESULT_LOCATION_DISALLOW;}
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_location_check_3, // Check if this will be the second oil refinery in the world
	industry_count(industry_oil_refinery,-1) == 1) {1: switch_power_plant_location_check_4; switch_power_plant_population_adder_factory_1;} 


switch (FEAT_INDUSTRIES, SELF, switch_power_plant_location_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_power_plant_location_check_3; return CB_RESULT_LOCATION_DISALLOW;} // Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 64 = 8 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_power_plant_location_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_power_plant_location_check_2;} // Add up the town zone radii and store it in temporary register 0
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_location_check_0, extra_callback_info2 == IND_CREATION_FUND) {1: return CB_RESULT_LOCATION_ALLOW; switch_power_plant_location_check_1;} // No restrictions on funded industries

item (FEAT_INDUSTRIES, industry_power_plant) {
	property {
		substitute:				INDUSTRYTYPE_POWER_PLANT;
		life_type:				IND_LIFE_TYPE_BLACK_HOLE;
		cargo_types:			[
								accept_cargo("COAL"),
								accept_cargo("PASS"),
								produce_cargo("PASS",2),
		];
		name:					string(STR_NAME_POWER_PLANT);
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_POWER_PLANT));
		prob_map_gen:			8;
		prob_in_game:			8;
		fund_cost_multiplier:	100;
		layouts:				[
			industry_layout_power_plant_1,
			industry_layout_power_plant_2,
			industry_layout_power_plant_3,
			industry_layout_power_plant_4,
			industry_layout_power_plant_5,
			];
		map_colour:				208;
	}
	graphics {
		location_check:			switch_power_plant_location_check_0;
		construction_probability:	(current_year >= 1882) ? CB_RESULT_IND_PROBABILITY_FROM_PROPERTY : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE_1882);
	}
}

item (FEAT_OBJECTS, object_item_power_plant_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_1;
	}
}

item (FEAT_OBJECTS, object_item_power_plant_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_2;
	}
}

item (FEAT_OBJECTS, object_item_power_plant_3) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_3;
	}
}

item (FEAT_OBJECTS, object_item_power_plant_4) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_4;
	}
}

// End Power Plant