// Begin Power Plant

spritelayout sprlay_power_plant_1 { // Powerhouse
	ground		{sprite:1420;}
	building	{sprite:2050;}
}

spritelayout sprlay_power_plant_2 { // Power terminals
	ground		{sprite:1420;}
	building	{sprite:2053;}
}

spritelayout sprlay_power_plant_3 { // Transformers
	ground		{sprite:1420;}
	building	{sprite:2054; yoffset:2;}
}

spritelayout sprlay_power_plant_4 { // Cooling tower
	ground		{sprite:3981;}
	building	{sprite:2047;}
}
spritelayout sprlay_power_plant_5_N { // Coal pile N
	ground		{sprite:2022;}
	building	{sprite:2023;}
}

spritelayout sprlay_power_plant_5_W { // Coal pile W
	ground		{sprite:2022;}
	building	{sprite:2024;}
}

switch (FEAT_INDUSTRYTILES, SELF, switch_power_plant_cooling_tower_availability, current_year >= 1918) {1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_1) { // Powerhouse
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {default:		sprlay_power_plant_1;}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_2) { // Power terminals
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {default:		sprlay_power_plant_2;}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_3) { // Transformers
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {default:		sprlay_power_plant_3;}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_4) { // Cooling tower
property {
	substitute:			02; 
	accepted_cargos: 	[[PASS, 8], [COAL, 8]];
	land_shape_flags:	bitmask(LSF_ONLY_ON_FLAT_LAND);
	}
graphics {
	default:	sprlay_power_plant_4;
	tile_check:	switch_power_plant_cooling_tower_availability;
}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_5_N) { // Coal pile N
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {default:		sprlay_power_plant_5_N;}}

item (FEAT_INDUSTRYTILES, ind_tile_power_plant_5_W) { // Coal pile W
property {substitute:	02; accepted_cargos: [[PASS, 8], [COAL, 8]];}
graphics {default:		sprlay_power_plant_5_W;}}


tilelayout industry_layout_power_plant_1 {
0,0:	ind_tile_power_plant_1;	0,1:	ind_tile_power_plant_1;
1,0:	ind_tile_power_plant_2;	1,1:	ind_tile_power_plant_2;
2,0:	ind_tile_power_plant_3;	2,1:	ind_tile_power_plant_3;
}

tilelayout industry_layout_power_plant_2 {
0,0:	ind_tile_power_plant_1;	0,1:	ind_tile_power_plant_5_N;
1,0:	ind_tile_power_plant_1;	1,1:	ind_tile_power_plant_5_W;
2,0:	ind_tile_power_plant_2;	2,1:	ind_tile_power_plant_3;
}

tilelayout industry_layout_power_plant_3 {
/*0,0:	clear;	*/				0,1:	ind_tile_power_plant_4;		/*0,2:	clear;*/	0,3:	ind_tile_power_plant_1;	0,4:	ind_tile_power_plant_5_N;
1,0:	ind_tile_power_plant_4;	/*1,1:	clear;	*/					/*1,2:	clear;*/	1,3:	ind_tile_power_plant_1;	1,4:	ind_tile_power_plant_5_W;
/*2,0:	clear;	*/				2,1:	ind_tile_power_plant_4;		/*2,2:	clear;*/	2,3:	ind_tile_power_plant_2;	2,4:	ind_tile_power_plant_3;
}

tilelayout industry_layout_power_plant_4 {
0,0:	ind_tile_power_plant_5_N;	0,1:	ind_tile_power_plant_1;
1,0:	ind_tile_power_plant_5_W;	1,1:	ind_tile_power_plant_1;
2,0:	ind_tile_power_plant_3;		2,1:	ind_tile_power_plant_2;
}

tilelayout industry_layout_power_plant_5 {
0,0:	ind_tile_power_plant_4;	/*0,1:	clear;	*/					0,2:	ind_tile_power_plant_4;
/*1,0:	clear;	*/				/*1,1:	clear;	*/					/*1,2:	clear;*/
2,0:	ind_tile_power_plant_1;	2,1:	ind_tile_power_plant_3;		2,2:	ind_tile_power_plant_1;
3,0:	ind_tile_power_plant_2;	3,1:	ind_tile_power_plant_2;		3,2:	ind_tile_power_plant_2;
4,0:	ind_tile_power_plant_1;	4,1:	ind_tile_power_plant_3;		4,2:	ind_tile_power_plant_1;
/*5,0:	clear;	*/				/*5,1:	clear;*/					/*5,2:	clear;*/
6,0:	ind_tile_power_plant_4;	/*6,1:	clear;*/					6,2:	ind_tile_power_plant_4;
}

/* // Industry Construction Switches - Read from bottom to top // */


/* Don't allow the same industry within 100 tiles - secondary industries only */
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_distance_competitor, industry_distance(industry_power_plant, -1) > 100 ) {1: CB_RESULT_LOCATION_ALLOW; CB_RESULT_LOCATION_DISALLOW;}


/* Population Check - different for power plants, only requiring at least 500 population with no regard for other industries */

switch (FEAT_INDUSTRIES, PARENT, switch_power_plant_population_check_1, // Check if there's enough population in the town to support the new industry in additon to whatever industries already exist (300 population per industry)
	population >= 500) {1: switch_power_plant_distance_competitor; CB_RESULT_LOCATION_DISALLOW;}


/* Town Distance Check - secondary industries only */

// Ensure processing industries are near towns. Distance measurement is to town sign, so this adds the town zone radii to scale the distance requirement to the town size
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_town_distance_check_2, town_euclidean_dist(0,0) <= LOAD_TEMP(0)+225) {1: switch_power_plant_population_check_1; return CB_RESULT_LOCATION_DISALLOW;} // Add 15 to the town zone radii and check if the distance to the town sign is smaller than that radius. The town zone radii and distance check use the square of the distance, thus 225 = 15 tiles. 
switch (FEAT_INDUSTRIES, PARENT, switch_power_plant_town_distance_check_1, STORE_TEMP(town_zone_0_radius_square + town_zone_1_radius_square + town_zone_2_radius_square + town_zone_3_radius_square + town_zone_4_radius_square, 0)) {switch_power_plant_town_distance_check_2;} // Add up the town zone radii and store it in temporary register 0


/*	Slot Reservations - all industries */

// Compare how many industries are currently on the map with the target number, scaled to the map size from a "normal" 256 x 256 map. If less than the target number, proceed to town distance checks, otherwise disallow construction.
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_density_high,
	industry_count(industry_power_plant, -1) < 4 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_power_plant_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_power_plant_density_normal,
	industry_count(industry_power_plant, -1) < 3 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_power_plant_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_power_plant_density_low,
	industry_count(industry_power_plant, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_power_plant_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

switch (FEAT_INDUSTRIES, SELF, switch_power_plant_density_verylow,
	industry_count(industry_power_plant, -1) < 1 * (map_x_edge / 256) * (map_y_edge / 256)) 
	{1: switch_power_plant_town_distance_check_1; return CB_RESULT_LOCATION_DISALLOW;}

// Get the selected industry density from parameter and redirect to the appropriate switch
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_density_selector, param_industry_density) {
	0: switch_power_plant_density_verylow;
	1: switch_power_plant_density_low;
	2: switch_power_plant_density_normal;
	3: switch_power_plant_density_high;
}

/*
Industry Totals on 256 x 256 map:

	Industry		Very Low (10)	Low (25)	Normal (55)		High (80)
	Oil Wells		1				4			8				12
	Farm			1				5			12				12
	Lumber Camp		1				3			8				12
	Coal Mine		1				3			6				12
	Iron Mine		1				3			6				12
	Steel Mill		1				1			2				3
	Factory			1				3			6				7
	Paper Mill		1				1			2				3
	Oil Refinery	1				1			2				3
	Power Plant		1				1			3				4
*/

// Funded industries aren't restricted by industry totals
switch (FEAT_INDUSTRIES, SELF, switch_power_plant_allow_funded, extra_callback_info2 == IND_CREATION_FUND) 
	{1: return CB_RESULT_LOCATION_ALLOW; switch_power_plant_density_selector;}

item (FEAT_INDUSTRIES, industry_power_plant) {
	property {
		substitute:				INDUSTRYTYPE_POWER_PLANT;
		life_type:				IND_LIFE_TYPE_BLACK_HOLE;
		cargo_types:			[
								accept_cargo("COAL"),
								accept_cargo("PASS"),
								produce_cargo("PASS",2),
		];
		name:					string(STR_NAME_POWER_PLANT);
		nearby_station_name:	string(STR_STATION, string(STR_TOWN), string(STR_NAME_POWER_PLANT));
		fund_cost_multiplier:	100;
		layouts:				[
			industry_layout_power_plant_1,
			industry_layout_power_plant_2,
			industry_layout_power_plant_3,
			industry_layout_power_plant_4,
			industry_layout_power_plant_5,
			];
		map_colour:				208;
	}
	graphics {
		location_check:			switch_power_plant_allow_funded;
		construction_probability:	(current_year >= 1882 && param_primary_only == 0) ? 1 : 0;
		extra_text_fund:		string(STR_FUND_AVAILABLE_1882);
	}
}

item (FEAT_OBJECTS, object_item_power_plant_1) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_1;
	}
}

item (FEAT_OBJECTS, object_item_power_plant_2) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_2;
	}
}

item (FEAT_OBJECTS, object_item_power_plant_3) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_3;
	}
}

item (FEAT_OBJECTS, object_item_power_plant_4) {
	property {
		class:					"HSIN";
		classname:				string(STR_NAME_OBJECT_MENU);
		name:					string(STR_NAME_POWER_PLANT);
		climates_available:		ALL_CLIMATES;
		object_flags:			bitmask(OBJ_FLAG_ANYTHING_REMOVE);
		build_cost_multiplier:	0;
		remove_cost_multiplier:	0;
		size:					[1,1];
		introduction_date:		1900;
		num_views:				1;
	}
	graphics {
		default:				sprlay_power_plant_4;
	}
}

// End Power Plant